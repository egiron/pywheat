{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"<p>Welcome to PyWheat</p> <p> </p> <p>Python library for simulation of wheat phenological development, crop growth and yield at large scales.</p>"},{"location":"#intro","title":"Intro","text":"<p>The PyWheat simulates the wheat growth and development in a daily time-step at field, local, regional and global scales. Most of the algorithms are based on the original Fortran routines of the CERES-Wheat 2.0<sup>1</sup>. </p> <p>To accurately simulate wheat growth, development, and yield, the model takes into account the following processes:</p> <ul> <li>Phenological development, especially as it is affected by genetics and weather.</li> <li>Extension growth of leaves, stems, and roots.</li> <li>Biomass accumulation and partitioning, especially reproductive organs.</li> <li>Soil water balance and water use by the crop.</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Spatial crop modeling at scale</li> <li>GIS and remote sensing supported</li> <li>Weather data directly from AgERA5 products</li> <li>Wheat Mega-environments</li> <li>Yield Forecasting</li> <li>Risk management </li> <li>Among others</li> </ul>"},{"location":"#quick-start","title":"Quick start","text":"<p>The package for estimating wheat grain yield using pywheat can be installed with <code>pip</code>:</p> <pre><code>pip install pywheat\n</code></pre> <p>This will add a command-line interface (CLI) that you can then use like so: <pre><code>pywheat\n</code></pre> This simple command shows the following message: <pre><code>Usage: pywheat [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n  pheno\n  phenology\n</code></pre></p> <p>You can see two functions or commands you will be able to run. Use the help option (-h) to see how to proceed.</p> <pre><code>pywheat phenology -h\n</code></pre> <pre><code>Usage: pywheat phenology [OPTIONS]\n\nOptions:\n  -lat, --latitude FLOAT       Latitude of the site  [required]\n  -lon, --longitude FLOAT      Longitude of the site\n  -sd, --sowing_date TEXT      Sowing date of the crop. eg. 1972-03-13\n                               [required]\n  -tbase, --tbase FLOAT        Base temperature for estimate Thermal time.\n                               Default 0.0\n  -tt_topt, --tt_topt FLOAT    Thermal time optimum temperature. Default 26\n  -tt_tmax, --tt_tmax FLOAT    Thermal time maximum temperature. Default 34\n  -sa, --sunangle FLOAT        Sun angle with the horizon. eg. p = 6.0 : civil\n                               twilight. Default 0.0\n  -sn, --snow FLOAT            Snow fall. Default 0.0\n  -sdepth, --sdepth FLOAT      Sowing depth in cm. Default 3.0 cm\n  -gdde, --gdde FLOAT          Growing degree days per cm seed depth required\n                               for emergence, Default 6.2 GDD/cm.\n  -dsgft, --dsgft FLOAT        GDD from End Ear Growth to Start Grain Filling\n                               period. Default 200 degree-days\n  -vreq, --vreq FLOAT          Vernalization required for max.development rate\n                               (VDays). Default 505 degree-days\n  -phint, --phint FLOAT        Phyllochron. A good estimate for PHINT is 95\n                               degree days. This value for PHINT is\n                               appropriate except for spring sown wheat in\n                               latitudes greater than 30 degrees north and 30\n                               degrees south, in which cases a value for PHINT\n                               of 75 degree days is suggested. Default 95.0\n                               degree-days\n  -p1v, --p1v FLOAT            Development genetic coefficients,\n                               vernalization. 1 for spring type, 5 for winter\n                               type. Default 4.85\n  -p1d, --p1d FLOAT            Development genetic coefficients, Photoperiod\n                               (1 - 6, low- high sensitive to day length).\n                               Default 3.675\n  -p5, --p5 FLOAT              Grain filling degree days. Old value was\n                               divided by 10. Default 500 degree-days.\n  -p6, --p6 FLOAT              Approximate the thermal time from physiological\n                               maturity to harvest. Default 250.\n  -glim, --glim FLOAT          Threshold for days to germination. Default 40\n  -elim, --elim FLOAT          Threshold for thermal time to emergence.\n                               Default 300\n  -tdu, --tdu FLOAT            Threshold for thermal development units (TDU).\n                               Default 400\n  -fmt, --inputformat TEXT     File format of the input weather file. Options\n                               CSV, DSSAT .WTH or Parquet\n  -ofmt, --outputformat TEXT   File format of the output phenology file.\n                               Options txt or csv\n  -best, --bestmodel BOOLEAN   Use the calibration parameters to estimate\n                               phenology\n  -w, --weather FILE           Path to input weather file in CSV or Parquet\n                               format  [required]\n  -o, --output FILE            Path to output phenology file.\n  -verbose, --verbose BOOLEAN  Display comments\n  -h, --help                   Show this message and exit.\n</code></pre>"},{"location":"#usage-in-cli","title":"Usage in CLI","text":"<pre><code>pywheat phenology -lat 37.18 -lon -99.75 -sd '1981-10-16' \\\n -w ./pywheat/data/example/KSAS.WTH -fmt wth -o ./outputs.txt -verbose False\n</code></pre> <p>Note</p> <p>The above instruction use 3 variables (latitude, longitude and sowing date of the site) to run the phenology model. It also requires the path of the weather data file in this case in DSSAT format. This will take a minute or so at the first time to compile the main functions and save them to the cache. Next time will be much faster.</p> <pre><code>RSTG   GROWTH STAGE      DAP  DOY   CROP AGE   SUMDTT   DATE \n7      Sowing              0  289      0            0   1981-10-16\n8      Germinate           1  290      1           28   1981-10-17\n9      Emergence           5  294      5           66   1981-10-21\n1      Term Spklt         36  325     31         1683   1981-11-21\n2      End Veg           147   71    111          290   1982-03-12\n3      End Ear Gr        169   93     22          202   1982-04-03\n4      Beg Gr Fil        184  108     15          158   1982-04-18\n5      End Gr Fil        214  138     30          459   1982-05-18\n6      Harvest           228  152     14          267   1982-06-01\n</code></pre>"},{"location":"#usage-in-a-python-session","title":"Usage in a python session","text":"<pre><code>&gt;&gt;&gt; import pywheat\n&gt;&gt;&gt; print(pywheat.__version__)\nPyWheat version 0.0.9\n&gt;&gt;&gt; from pywheat.data import load_dataset\n&gt;&gt;&gt; # Load Kansas data\n&gt;&gt;&gt; data = load_dataset()\nLoading example weather dataset \nfrom Kansas State University (Wagger,M.G. 1983) stored in DSSAT v4.8.\n&gt;&gt;&gt; data['Weather']\n          DATE  SRAD  TMAX  TMIN  RAIN\n0   1981-10-01  18.9  23.3  10.0   0.0\n1   1981-10-02  18.2  22.2   5.6   0.0\n2   1981-10-03   2.4  16.7  11.1   0.3\n3   1981-10-04  13.8  26.1  12.8  34.0\n4   1981-10-05  12.1  26.7  15.6   0.0\n..         ...   ...   ...   ...   ...\n299 1982-07-27  19.9  31.7  22.2   0.0\n300 1982-07-28  24.9  29.4  20.0   0.0\n301 1982-07-29  20.9  30.0  16.7   0.0\n302 1982-07-30  26.4  30.0  18.9   0.0\n303 1982-07-31  26.5  33.3  14.4   0.0\n\n[304 rows x 5 columns]\n&gt;&gt;&gt; #\u00a0Initialization of variables \n&gt;&gt;&gt; #\u00a0Default variables are commented\n&gt;&gt;&gt; params = dict(\n...     sowing_date = \"1981-10-16\", # Sowing date in YYYY-MM-DD\n...     latitude = 39.0, # Latitude of the site\n... )\n&gt;&gt;&gt; from pywheat.pheno import determine_phenology_stage\n&gt;&gt;&gt; import matplotlib.pylab as plt\n&gt;&gt;&gt; growstages = determine_phenology_stage(initparams=params, weather=data['Weather'], \n...                                        dispDates=True, dispFigPhenology=True, verbose=False)\nRSTG   GROWTH STAGE      DAP  DOY   CROP AGE   SUMDTT   DATE \n7      Sowing              0  289      0            0   1981-10-16\n8      Germinate           1  290      1           28   1981-10-17\n9      Emergence           5  294      5           66   1981-10-21\n1      Term Spklt         23  312     18          503   1981-11-08\n2      End Veg           122   46     99          286   1982-02-15\n3      End Ear Gr        153   77     31          192   1982-03-18\n4      Beg Gr Fil        173   97     20          156   1982-04-07\n5      End Gr Fil        207  131     34          468   1982-05-11\n6      Harvest           221  145     14          264   1982-05-25\n\n#\u00a0Display a figure with the phenological stages \nplt.show()\n</code></pre> <p>For detailed installation instructions visit installation</p> <p>For detailed instructions of how-to get started, configuration options, and a demo, visit Getting Started</p>"},{"location":"#upgrade-pywheat","title":"Upgrade pywheat","text":"<p>If you have installed pywheat before and want to upgrade to the latest version, you can run the following command in your terminal:</p> <pre><code>pip install -U pywheat\n</code></pre>"},{"location":"#feedback","title":"Feedback","text":"<p>If you have any feedback, please reach out to us at Feedback</p>"},{"location":"#faq","title":"FAQ","text":"<p>Please read out frequently asked questions before you send an email.</p>"},{"location":"#authors","title":"Authors","text":"<ul> <li>@egiron</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2023 </p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>Additional License please check out License</p> <p>Sponsors</p> <p> </p> <p> </p> <ol> <li> <p>CERES-Wheat version 2.0 by Dr. Joe T. Ritchie and Dr. Doug Godwin. https://nowlin.css.msu.edu/wheat_book/ \u21a9</p> </li> <li> <p>Ritchie, J.T.1991. Wheat phasic development. p. 31-54. In Hanks and Ritchie (ed.) Modeling plant and soil systems. Agron. Monogr. 31, ASA, CSSSA, SSSA, Madison, WI.\u00a0\u21a9</p> </li> <li> <p>Ritchie, J.T. and D.S. NeSmith. 1991. Temperature and Crop Development. p. 5-29. In Hanks and Ritchie (ed.) Modeling plant and soil systems. Agron. Monogr. 31, ASA, CSSSA, SSSA, Madison, WI.\u00a0\u21a9</p> </li> </ol>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/egiron/pywheat/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>PyWheat could always use more documentation, whether as part of the official PyWheat docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/egiron/pywheat/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started","text":"<p>Ready to contribute? Here's how to set up pywheat for local development.</p> <ol> <li> <p>Fork the pywheat repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>git clone git@github.com:your_name_here/pywheat.git\n</code></pre> </li> <li> <p>Install your local copy into a conda env. Assuming you have conda installed, this is how you set up your fork for local development:</p> <pre><code>conda create -n pywheat-test python\n</code></pre> <pre><code>conda activate pywheat-test\n</code></pre> <pre><code>cd pywheat/\n</code></pre> <pre><code>pip install -e .\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>git checkout -b name-of-your-contribution\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass the tests, including testing other Python versions with tox. To get flake8 and tox, just pip install them into your development environment.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>git add .\n</code></pre> <pre><code>git commit -m \"Your detailed description of your changes.\"\n</code></pre> <pre><code>git push origin name-of-your-contribution\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.9, 3.10 and 3.11, and for PyPy. Check https://github.com/egiron/pywheat/actions and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"data/","title":"Data","text":""},{"location":"data/#data","title":"Data","text":"<p>The wheat example data is taken from Kansas State University provided by DSSAT v4.8. The sowing date, latitude and daily weather data of the site is used as input for the phenology algorithms.</p>"},{"location":"data/#weather-data","title":"Weather Data","text":"<p>The last generation of ERA5 global atmospheric reanalysis weather data is used. This product is generated by the European Centre for Medium-Range Weather Forecasts (ECMWF) and is provided both at an hourly and monthly time scale, with a horizontal resolution of 0.1\u00b0 x 0.1\u00b0 (~10 km), covering the period 1979 to present (Hersbach et al., 2020).</p> <p>The weather data used in the example is from Kansas State University (Wagger,M.G. 1983) stored in DSSAT v4.8. </p>"},{"location":"data/#references","title":"References","text":"<ul> <li> <p>Ritchie, J.T.1991. Wheat phasic development. p. 31-54. In Hanks and Ritchie (ed.) Modeling plant and soil systems. Agron. Monogr. 31, ASA, CSSSA, SSSA, Madison, WI.</p> </li> <li> <p>Hoogenboom, G., C.H. Porter, V. Shelia, K.J. Boote, U. Singh, W. Pavan, F.A.A. Oliveira, L.P. Moreno-Cadena, T.B. Ferreira, J.W. White, J.I. Lizaso, D.N.L. Pequeno, B.A. Kimball, P.D. Alderman, K.R. Thorp, S.V. Cuadra, M.S. Vianna, F.J. Villalobos, W.D. Batchelor, S. Asseng, M.R. Jones, A. Hopf, H.B. Dias, L.A. Hunt, and J.W. Jones. 2023. Decision Support System for Agrotechnology Transfer (DSSAT) Version 4.8.2 (www.DSSAT.net). DSSAT Foundation, Gainesville, Florida, USA.</p> </li> <li> <p>Kansas Example Data documented in Wagger,M.G. 1983 Nitrogen cycling in the plan-soil system. Ph.D. thesis, Kansas State Univ.</p> </li> <li> <p>Boogaard, H., Schubert, J., De Wit, A., Lazebnik, J., Hutjes, R., Van der Grijn, G., (2020): Agrometeorological indicators from 1979 to present derived from reanalysis. Copernicus Climate Change Service (C3S) Climate Data Store (CDS). DOI: 10.24381/cds.6c68c9bb (Accessed on 23-Sep-2023)</p> </li> </ul>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#how-do-i-report-an-issue-or-make-a-feature-request","title":"How do I report an issue or make a feature request","text":"<p>Please go to https://github.com/egiron/pywheat/issues.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#getting-started","title":"Getting started","text":"<p>The following instructions allow you to determine the phenological phases of wheat. </p>"},{"location":"getting_started/#creating-application-directory-and-installing-dependencies","title":"Creating application directory and installing dependencies","text":"<p>Launch your terminal and navigate to your desired location to create the project directory. Run the following commands to create a directory for your project:</p> <pre><code>mkdir &lt;`subfolder`&gt;\ncd &lt;`subfolder`&gt;\n</code></pre> <p>Create a virtual environment with:</p> <pre><code>python3 -m venv venv\n</code></pre> <p>Note</p> <p>Please follow the installation instructions to complete the steps above according to your local system.</p>"},{"location":"getting_started/#setup-a-folder","title":"Setup a folder","text":"<p>Enter a folder or subfolder of your project root where you created the python environment and activate it. <pre><code>#\u00a0cd &lt;`subfolder`&gt;\nsource ./venv/bin/activate\n</code></pre> If you didn't install the <code>venv</code> yet, please review the detailed installation instructions</p>"},{"location":"getting_started/#install-library","title":"Install library","text":"<p>Setting up PyWheat is as simple as using the familiar <code>pip install</code> command. By executing the following line, you will have the library installed and ready to use:</p> <pre><code>pip install pywheat\n</code></pre>"},{"location":"getting_started/#verify-install","title":"Verify install","text":"<pre><code>python3 -c \"import pywheat; print(pywheat.__version__)\"\n</code></pre> <p>If a version similar to <code>pywheat version 0.0.5</code> is returned, you've installed the package successfully.</p> <p>Success: PyWheat package is now installed.</p> View Sample quickstart for beginners <p>To get started with PyWheat, we need to create a project folder and install a python virtual environment for our packages and further analysis as follows:</p> Shell <pre><code>mkdir pywheat_Project_2023;cd pywheat_Project_2023;\npython3 -m venv venv\nsource . venv/bin/activate\npip install pywheat\npython3 -c \"import pywheat; print(pywheat.__version__)\"\n</code></pre> Quick Start <p>Note: this tutorial is also available as a single python notebook. You can download it on Github below:</p> <p>Download Python Notebook</p> <p>Once pywheat library is successfully installed, you can import the essential modules for dataset creation and data pre-processing.</p>"},{"location":"getting_started/#an-easy-way-to-learn-and-use-pywheat-package","title":"An easy way to learn and use PyWheat package","text":"<p>No install necessary, run the PyWheat tutorials directly in the browser with Colaboratory, a Google research project created to help disseminate machine learning education and research. It's a Jupyter notebook environment that requires no setup to use and runs entirely in the cloud.</p> <p></p>"},{"location":"getting_started/#Load-a-dataset","title":"Load a dataset recommended for beginners","text":"<p>Load and prepare the trial dataset. </p>"},{"location":"getting_started/#loading-the-data","title":"Loading the data","text":"<p>Example dataset can be loaded directly from the library, as follows:</p> <pre><code>import pywheat\nfrom pywheat.data import load_dataset #\u00a0Function to load existing dataset\n#\u00a0Load example dataset (Weather data for an example site)\ndata = load_dataset()\n#\u00a0Display Weather\ndata['Weather'].head()\n</code></pre>"},{"location":"getting_started/#determine-phenological-stage","title":"Determine Phenological stage","text":"<p>The <code>pheno</code> module contains all of the required functions to analyse the data and display the wheat phenology</p> <pre><code># Load module\nfrom pywheat.pheno import determine_phenology_stage\n</code></pre>"},{"location":"getting_started/#model-configuration","title":"Model configuration","text":"<pre><code># ------------------------\n#\u00a0MODEL CONFIGURATION\n# ------------------------\n# Define the Path where the output data will be stored\nPATH_PRJ = '/Users/ernestogiron/Desktop/WheatPhenology/'\nRESULTS_PATH = PATH_PRJ + 'results/'\n\n#\u00a0Initialization of variables \nparams = dict(\n        sowing_date = \"1981-10-16\", # Sowing date in YYYY-MM-DD\n        latitude = 39.0, # Latitude of the site\n        GDDE = 6.2, # Growing degree days per cm seed depth required for emergence, GDD/cm\n        VREQ  = 505.0, # Vernalization required for max.development rate (VDays)\n        PHINT = 95.0, #\u00a0Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. \n        P1V = 4.85, # development genetic coefficients, vernalization. 1 for spring type, 5 for winter type\n        P1D = 3.675, # development genetic coefficients, Photoperiod (1 - 6, low - high sensitive to day length)\n)\n</code></pre>"},{"location":"getting_started/#run-model-to-estimate-the-phenology","title":"Run model to estimate the phenology","text":"<p><pre><code>growstages = determine_phenology_stage(initparams=params, weather=data['Weather'], dispDates=True, dispFigPhenology=False, verbose=False)\n</code></pre> The output should look like something like this:</p> <pre><code>RSTG   GROWTH STAGE      DAP  DOY   CROP AGE   SUMDTT   DATE \n7      Sowing              0  289      0            0   1981-10-16\n8      Germinate           1  290      1         16.1   1981-10-17\n9      Emergence           5  294      4         67.0   1981-10-21\n1      Term Spklt        185  109    180        402.2   1982-04-19\n2      End Veg           205  129     20        302.4   1982-05-09\n3      End Ear Gr        215  139     10        200.5   1982-05-19\n4      Beg Gr Fil        225  149     10        214.1   1982-05-29\n5      End Gr Fil        250  174     25        515.4   1982-06-23\n6      Harvest           260  184     10        259.0   1982-07-03\n</code></pre>"},{"location":"getting_started/#draw-the-phenological-phases","title":"Draw the phenological phases","text":"<p><pre><code>#\u00a0Using the option dispFigPhenology=True in step above or \n\n#\u00a0Load Utils module to customize\nfrom pywheat.utils import drawPhenology\n\n# Display a figure with the phenological stages determined in the step above\ndrawPhenology(gs=growstages, title='Phenological growth phases of Wheat', dpi=300,\n             dispPlants=True, topDAPLabel=True, timeSpanLabel=True, topNameStageLabel=True,\n             topNameStageLabelOpt=True, copyrightLabel=True, \n             saveFig=True, showFig=True, path_to_save_results='./', \n             fname='Fig_1_Phenological_Phases_Wheat', fmt='jpg')\n</code></pre> </p>"},{"location":"getting_started/#conclusion","title":"Conclusion","text":"<p>Congratulations</p> <p>You have run a simulation using a prebuilt dataset and the PyWheat API.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":"<p>PyWheat package is published as a Python package and can be installed with <code>pip</code> (the Python package manager), ideally by using a virtual environment. </p>"},{"location":"installation/#supported-python-versions","title":"Supported Python versions","text":"<ul> <li>Python 3.10 - 3.11</li> <li>pip version 19.0 or higher for Linux (requires manylinux2014 support) and Windows. pip version 20.3 or higher for macOS.</li> </ul>"},{"location":"installation/#system-requirements","title":"System requirements","text":"<ul> <li>Ubuntu 16.04 or higher (64-bit)</li> <li>macOS 10.12.6 (Sierra) or higher (64-bit)</li> <li>Windows Native - Windows 7 or higher (64-bit)</li> <li>Windows WSL2 - Windows 10 19044 or higher (64-bit)</li> </ul>"},{"location":"installation/#environment","title":"Environment optional","text":"<p>We recommend using a virtual environment, which is an isolated Python runtime. If you are in a virtual environment, any packages that you install or upgrade will be local to the environment. If you run into problems, you can just delete and recreate the environment. It's trivial to set up:</p> <ul> <li> <p>Create a new virtual environment with:</p> <pre><code>python3 -m venv venv\n</code></pre> </li> <li> <p>Activate the environment with:</p>  macOS Windows Linux <pre><code>. venv/bin/activate\n</code></pre> <pre><code>. venv/Scripts/activate\n</code></pre> <pre><code>. venv/bin/activate\n</code></pre> <p>Your terminal should now print <code>(venv)</code> before the prompt, which is how you know that you are inside the virtual environment that you just created.</p> </li> <li> <p>Exit the environment with:</p> <pre><code>deactivate\n</code></pre> </li> </ul>"},{"location":"installation/#with-pip","title":"with pip recommended","text":"<p>Open up a terminal and install PyWheat with:</p> Stable1.xLatest <pre><code>pip install pywheat\n</code></pre> <p>This is the preferred method to install <code>pywheat</code>, as it will always install the most recent stable release.</p> <pre><code>pip install pywheat==\"1.*\"\n</code></pre> <p>or from sources:</p> <pre><code>pip install \"git+https://github.com/egiron/pywheat@v1.0.0\"\n</code></pre> <pre><code>pip install git+https://github.com/egiron/pywheat\n</code></pre> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p> <p>This will automatically install compatible versions of all dependencies: Numpy, Numba, Pandas, Scikit-learn, Scipy, Matplotlib, Seaborn, IPython, Shapely and Arrow. PyWheat library always strives to support the latest versions, so there's no need to install those packages separately.</p>"},{"location":"installation/#optional-dependencies","title":"Optional dependencies","text":"<ul> <li>vaex, is a high performance Python library for lazy Out-of-Core DataFrames (similar to Pandas), to visualize and explore big tabular datasets. Vaex uses memory mapping, zero memory copy policy and lazy computations for best performance (no memory wasted). Used to explore big combinations datasets saved in Parquet or HDF5 format.</li> <li>duckdb, is an in-process SQL OLAP database management system. It provides support for both reading and writing Parquet files in an efficient manner, as well as support for pushing filters and projections into the Parquet file scans.</li> </ul>"},{"location":"installation/#with-git","title":"with git","text":"<p>PyWheat package can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version.</p> <p>Use Git to clone the pywheat repository: <pre><code>git clone https://github.com/egiron/pywheat.git\ncd pywheat\n</code></pre></p> <p>After cloning from <code>git</code>, you must install all required dependencies with:</p> <pre><code>pip install -e pywheat\n# or\npip install -e .\n</code></pre>"},{"location":"installation/#verify-install","title":"Verify install","text":"<pre><code>python3 -c \"import pywheat; print(pywheat.__version__)\"\n</code></pre> <p>If a pywheat version similar to <code>pywheat version 1.0.0</code> is returned, you've installed PyWheat package successfully.</p> <p>Success: PyWheat is now installed.</p> <p>Support</p> <p>If you're using PyWheat library in your organization and need assistance, e.g., to reduce processing times, improve performance or ensure compliance, get in touch to discuss our support offerings. We're happy to help!</p> <p>Bugs may be reported at Issues.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2021-2023 </p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"notebooks/Getting%20Started/","title":"Estimating Pheanology","text":"In\u00a0[1]: Copied! <pre># Install library\n#!pip install pywheat\n</pre> # Install library #!pip install pywheat In\u00a0[1]: Copied! <pre>import os, sys, gc\nimport pandas as pd\npd.set_option('display.max_columns', None)\n\n# Load PyWheat library\nimport pywheat\n\nprint(pywheat.__version__)\n</pre> import os, sys, gc import pandas as pd pd.set_option('display.max_columns', None)  # Load PyWheat library import pywheat  print(pywheat.__version__)  <pre>PyWheat version 0.0.5\n</pre> In\u00a0[2]: Copied! <pre>from pywheat.data import load_dataset\n\n# Load Kansas data\ndata = load_dataset()\ndata['Weather']\n</pre> from pywheat.data import load_dataset  # Load Kansas data data = load_dataset() data['Weather'] <pre>Loading example weather dataset \nfrom Kansas State University (Wagger,M.G. 1983) stored in DSSAT v4.8.\n</pre> Out[2]: DATE SRAD TMAX TMIN RAIN 0 1981-10-01 18.9 23.3 10.0 0.0 1 1981-10-02 18.2 22.2 5.6 0.0 2 1981-10-03 2.4 16.7 11.1 0.3 3 1981-10-04 13.8 26.1 12.8 34.0 4 1981-10-05 12.1 26.7 15.6 0.0 ... ... ... ... ... ... 299 1982-07-27 19.9 31.7 22.2 0.0 300 1982-07-28 24.9 29.4 20.0 0.0 301 1982-07-29 20.9 30.0 16.7 0.0 302 1982-07-30 26.4 30.0 18.9 0.0 303 1982-07-31 26.5 33.3 14.4 0.0 <p>304 rows \u00d7 5 columns</p> In\u00a0[3]: Copied! <pre>#\u00a0Initialization of variables \n#\u00a0Default variables are commented\nparams = dict(\n    sowing_date = \"1981-10-16\", # Sowing date in YYYY-MM-DD\n    latitude = 39.0, # Latitude of the site\n    #SDEPTH = 3.0, # Sowing depth in cm\n    GDDE = 6.2, # Growing degree days per cm seed depth required for emergence, GDD/cm\n    #DSGFT = 200, #\u00a0GDD from End Ear Growth to Start Grain Filling period\n    VREQ  = 505.0, # Vernalization required for max.development rate (VDays)\n    PHINT = 95.0, #\u00a0Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. \n    P1V = 4.85, # development genetic coefficients, vernalization. 1 for spring type, 5 for winter type\n    P1D = 3.675, # development genetic coefficients, Photoperiod (1 - 6, low - high sensitive to day length)\n    #P5 = 500, # grain filling degree days eg. 500 degree-days. Old value was divided by 10.\n    #P6 = 250, # approximate the thermal time from physiological maturity to harvest\n)\n</pre> #\u00a0Initialization of variables  #\u00a0Default variables are commented params = dict(     sowing_date = \"1981-10-16\", # Sowing date in YYYY-MM-DD     latitude = 39.0, # Latitude of the site     #SDEPTH = 3.0, # Sowing depth in cm     GDDE = 6.2, # Growing degree days per cm seed depth required for emergence, GDD/cm     #DSGFT = 200, #\u00a0GDD from End Ear Growth to Start Grain Filling period     VREQ  = 505.0, # Vernalization required for max.development rate (VDays)     PHINT = 95.0, #\u00a0Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested.      P1V = 4.85, # development genetic coefficients, vernalization. 1 for spring type, 5 for winter type     P1D = 3.675, # development genetic coefficients, Photoperiod (1 - 6, low - high sensitive to day length)     #P5 = 500, # grain filling degree days eg. 500 degree-days. Old value was divided by 10.     #P6 = 250, # approximate the thermal time from physiological maturity to harvest )  <p>Note: All the paramters above are given by default except for <code>sowing_date</code> and <code>latitude</code>.</p> In\u00a0[4]: Copied! <pre>%%time\nfrom pywheat.pheno import determine_phenology_stage\n\ngrowstages = determine_phenology_stage(initparams=params, weather=data['Weather'], dispDates=True, verbose=False)\n</pre> %%time from pywheat.pheno import determine_phenology_stage  growstages = determine_phenology_stage(initparams=params, weather=data['Weather'], dispDates=True, verbose=False)  <pre>RSTG   GROWTH STAGE      DAP  DOY   CROP AGE   SUMDTT   DATE \n7      Sowing              0  289      0            0   1981-10-16\n8      Germinate           1  290      1         16.1   1981-10-17\n9      Emergence           5  294      4         67.0   1981-10-21\n1      Term Spklt        185  109    180        402.2   1982-04-19\n2      End Veg           205  129     20        302.4   1982-05-09\n3      End Ear Gr        215  139     10        200.5   1982-05-19\n4      Beg Gr Fil        225  149     10        214.1   1982-05-29\n5      End Gr Fil        250  174     25        515.4   1982-06-23\n6      Harvest           260  184     10        259.0   1982-07-03\nCPU times: user 956 ms, sys: 195 ms, total: 1.15 s\nWall time: 779 ms\n</pre> <pre><code>Data from: DSSAT v4.8\nDocumented in Wagger,M.G. 1983 Nitrogen cycling in the plan-soil system.\nPh.D. thesis, Kansas State Univ..Mike Wagger currently thought to be at \nthe Agronomy Dept,N.Carolina State Un\n\n*SIMULATED CROP AND SOIL STATUS AT MAIN DEVELOPMENT STAGES\n  \n RUN NO.      1   N RESPONSE,KANSAS STATE  3FE(N)*2IR  (DSSAT3)               \n\n ...... DATE ......  GROWTH STAGE BIOMASS   LEAF       CROP N      STRESS\n YEARDOY DOM MON DAP ............. kg/ha AREA NUMBER  kg/ha   %   H2O    N\n 1981289  16 Oct   0 7 Sowing         0  0.00   0.0     0   0.0  0.00  0.00\n 1981290  17 Oct   1 8 Germinate      0  0.00   0.0     0   0.0  0.00  0.00\n 1981294  21 Oct   5 9 Emergence      0  0.00   0.0     0   0.0  0.00  0.00\n 1982109  19 Apr 185 1 Term Spklt  1049  0.99  11.0    15   1.4  0.00  0.03\n 1982129   9 May 205 2 End Veg     2365  1.77  14.1    27   1.1  0.00  0.38\n 1982139  19 May 215 3 End Ear Gr  3540  1.56  14.1    31   0.9  0.00  0.13\n 1982149  29 May 225 4 Beg Gr Fil  5065  1.41  14.1    35   0.7  0.00  0.00\n 1982174  23 Jun 250 5 End Gr Fil  6660  0.34  14.1    57   0.9  0.00  0.52\n 1982174  23 Jun 250 6 Harvest     6660  0.34  14.1    57   0.9  0.00  0.98\n</code></pre> In\u00a0[6]: Copied! <pre>pd.DataFrame(growstages).T\n</pre> pd.DataFrame(growstages).T Out[6]: istage_old istage desc date DOY AGE DAP SUMDTT 7 Sowing Fallow No crop present to Sowing 1981-10-16 289 0 0 0 8 Germinate Sowing Sowing to Germination 1981-10-17 290 1 1 16.1 9 Emergence Germinate Emergence to End of Juvenile 1981-10-21 294 4 5 67.0 1 Term Spklt Emergence Emergence to End of Juvenile 1982-04-19 109 180 185 402.2 2 End Veg End Juveni End of Juvenile to End of Vegetative growth 1982-05-09 129 20 205 302.4 3 End Ear Gr End Veg End of Vegetative Growth to End of Ear Grow 1982-05-19 139 10 215 200.5 4 Beg Gr Fil End Ear Gr End of Ear Growth to Start of Grain Filling 1982-05-29 149 10 225 214.1 5 End Gr Fil Beg Gr Fil Start of Grain Filling to Maturity 1982-06-23 174 25 250 515.4 6 Harvest Maturity End Gr Fil 1982-07-03 184 10 260 259.0 In\u00a0[7]: Copied! <pre>?determine_phenology_stage\n</pre> ?determine_phenology_stage <pre>Signature:\ndetermine_phenology_stage(\n    initparams=None,\n    weather=None,\n    dispDates=True,\n    verbose=False,\n)\nDocstring:\nEstimate Wheat phenological stages using CERES-Wheat model\n\nParameters:\n    params (dict): A dictionary with initial parameters\n    weather (object): A table or dataframe with weather data for the site\n    dispDates (bool): Display results in text format. Default is True\n    verbose (bool): Display comments during the processes. Default is False\n\nAttributes:\n    TT_TBASE (float): Base temperature for estimate Thermal time. Default 0.0\n    TT_TEMPERATURE_OPTIMUM (float): Thermal time optimum temperature. Default 26\n    TT_TEMPERATURE_MAXIMUM (float): Thermal time maximum temperature. Default 34\n    CIVIL_TWILIGHT (float): Sun angle with the horizon. eg. p = 6.0 : civil twilight. Default 0.0\n    HI (float): Hardiness Index. Default 0.0 \n    SNOW (float): Snow fall. Default 0.0\n    SDEPTH (float): Sowing depth in cm. Default 3.0 cm\n    GDDE (float): Growing degree days per cm seed depth required for emergence, Default 6.2 GDD/cm.\n    DSGFT (float): GDD from End Ear Growth to Start Grain Filling period. Default 200 degree-days\n    VREQ  (float): Vernalization required for max.development rate (VDays). Default 505 degree-days\n    PHINT (float): Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. Default 95.0 degree-days\n    P1V (float): Development genetic coefficients, vernalization. 1 for spring type, 5 for winter type. Default 4.85\n    P1D (float): Development genetic coefficients, Photoperiod (1 - 6, low- high sensitive to day length). Default 3.675\n    P5 (float): Grain filling degree days. Old value was divided by 10. Default 500 degree-days.\n    P6 (float): Approximate the thermal time from physiological maturity to harvest. Default 250.\n    DAYS_GERMIMATION_LIMIT (float): Threshold for days to germination. Default 40\n    TT_EMERGENCE_LIMIT (float): Threshold for thermal time to emergence. Default 300\n    TT_TDU_LIMIT (float): Threshold for thermal development units (TDU). Default 400 \n    \nReturns:\n    growstages (dict): A dictionary with all phenological stages and addtional useful information\n    \nFile:      ~/Desktop/PRJ2023/CROP_MODELING/pywheat-package/pywheat/pywheat/pheno/__init__.py\nType:      function</pre> In\u00a0[5]: Copied! <pre>#\u00a0Using option dispFigPhenology=True\ngrowstages = determine_phenology_stage(initparams=params, weather=data['Weather'], \n                                       dispDates=True, dispFigPhenology=True, verbose=False)\n</pre> #\u00a0Using option dispFigPhenology=True growstages = determine_phenology_stage(initparams=params, weather=data['Weather'],                                         dispDates=True, dispFigPhenology=True, verbose=False)  <pre>RSTG   GROWTH STAGE      DAP  DOY   CROP AGE   SUMDTT   DATE \n7      Sowing              0  289      0            0   1981-10-16\n8      Germinate           1  290      1         16.1   1981-10-17\n9      Emergence           5  294      4         67.0   1981-10-21\n1      Term Spklt        185  109    180        402.2   1982-04-19\n2      End Veg           205  129     20        302.4   1982-05-09\n3      End Ear Gr        215  139     10        200.5   1982-05-19\n4      Beg Gr Fil        225  149     10        214.1   1982-05-29\n5      End Gr Fil        250  174     25        515.4   1982-06-23\n6      Harvest           260  184     10        259.0   1982-07-03\n</pre> In\u00a0[6]: Copied! <pre># Loading Utils module to customise\nfrom pywheat.utils import drawPhenology\n\ndrawPhenology(gs=growstages, title='Phenological growth phases of Wheat', dpi=300,\n             dispPlants=True, topDAPLabel=True, timeSpanLabel=True, topNameStageLabel=True,\n             topNameStageLabelOpt=True, copyrightLabel=True, \n             saveFig=True, showFig=True, path_to_save_results='/Users/ernestogiron/Downloads/', \n             fname='Fig_1_Phenological_Phases_Wheat_v2', fmt='jpg')\n</pre> # Loading Utils module to customise from pywheat.utils import drawPhenology  drawPhenology(gs=growstages, title='Phenological growth phases of Wheat', dpi=300,              dispPlants=True, topDAPLabel=True, timeSpanLabel=True, topNameStageLabel=True,              topNameStageLabelOpt=True, copyrightLabel=True,               saveFig=True, showFig=True, path_to_save_results='/Users/ernestogiron/Downloads/',               fname='Fig_1_Phenological_Phases_Wheat_v2', fmt='jpg') In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/Getting%20Started/#pywheat","title":"PyWheat\u00b6","text":"<p>Python library for simulation of wheat phenological development, crop growth and yield.</p> <p>Author:</p> <ul> <li>Ernesto Giron Echeverry (Independent Researcher, e.giron.e@gmail.com)</li> </ul> <p>Last updated: October 11, 2023</p>"},{"location":"notebooks/Getting%20Started/#load-libraries","title":"Load Libraries\u00b6","text":""},{"location":"notebooks/Getting%20Started/#load-example-dataset","title":"Load example dataset\u00b6","text":""},{"location":"notebooks/Getting%20Started/#setup-initial-parameters","title":"Setup initial parameters\u00b6","text":""},{"location":"notebooks/Getting%20Started/#estimate-phenological-stage","title":"Estimate Phenological stage\u00b6","text":""},{"location":"notebooks/Getting%20Started/#compare-results-estimated-with-dssat-v48","title":"Compare results estimated with DSSAT v4.8\u00b6","text":""},{"location":"notebooks/Getting%20Started/#draw-phenological-phases","title":"Draw phenological phases\u00b6","text":""},{"location":"notebooks/Using_data_from_ERA5_and_GEE/","title":"Using ERA5 weather data","text":"Run in Google Colab  View source on GitHub In\u00a0[1]: Copied! <pre># Install library\n#!pip install pywheat\n</pre> # Install library #!pip install pywheat In\u00a0[\u00a0]: Copied! <pre>import os, sys, gc\nimport pandas as pd\npd.set_option('display.max_columns', None)\n\n# Load PyWheat library\nimport pywheat\nfrom pywheat.data import satellite\nfrom pywheat.pheno import determine_phenology_stage\n\nprint(pywheat.__version__)\n</pre> import os, sys, gc import pandas as pd pd.set_option('display.max_columns', None)  # Load PyWheat library import pywheat from pywheat.data import satellite from pywheat.pheno import determine_phenology_stage  print(pywheat.__version__)  In\u00a0[\u00a0]: Copied! <pre>#\u00a0Load GEE libraries and authenticate with your credentials\n#\u00a0Further info at https://developers.google.com/earth-engine/guides/access\n#\u00a0https://developers.google.com/earth-engine/guides/python_install\nimport ee\nee.Authenticate()\n#ee.Initialize()\nee.Initialize(opt_url='https://earthengine-highvolume.googleapis.com')\n</pre> #\u00a0Load GEE libraries and authenticate with your credentials #\u00a0Further info at https://developers.google.com/earth-engine/guides/access #\u00a0https://developers.google.com/earth-engine/guides/python_install import ee ee.Authenticate() #ee.Initialize() ee.Initialize(opt_url='https://earthengine-highvolume.googleapis.com') In\u00a0[\u00a0]: Copied! <pre>#\u00a0Using data from ERA5 and GEE\n# Define the initial parameters for the site\nsowing_date = '2019-01-28'\nlng, lat = 83.45, 27.5\n\n#\u00a0Get daily weather data using PyWheat API\nweather_data = satellite.getERA5(init_dates=[sowing_date], coords=[[lng,lat]],\n                       agg='DAILY_AGGR', buffer=1, dispFig=True)\n\n# re-format or rename columns to match with PyWheat structure\nweather_data.rename(columns={'date':'DATE','Tmin':'TMIN', 'Tmax':'TMAX'}, inplace=True)\nweather_data[\"DATE\"] = pd.to_datetime(weather_data[\"DATE\"].astype(str), format='%Y-%m-%d')\nweather_data = weather_data.sort_values([\"DATE\"]).reset_index(drop=True)\n\nweather_data\n</pre> #\u00a0Using data from ERA5 and GEE # Define the initial parameters for the site sowing_date = '2019-01-28' lng, lat = 83.45, 27.5  #\u00a0Get daily weather data using PyWheat API weather_data = satellite.getERA5(init_dates=[sowing_date], coords=[[lng,lat]],                        agg='DAILY_AGGR', buffer=1, dispFig=True)  # re-format or rename columns to match with PyWheat structure weather_data.rename(columns={'date':'DATE','Tmin':'TMIN', 'Tmax':'TMAX'}, inplace=True) weather_data[\"DATE\"] = pd.to_datetime(weather_data[\"DATE\"].astype(str), format='%Y-%m-%d') weather_data = weather_data.sort_values([\"DATE\"]).reset_index(drop=True)  weather_data In\u00a0[3]: Copied! <pre>#\u00a0Initialization of variables \nparams = dict(\n    sowing_date = sowing_date, # Sowing date in YYYY-MM-DD\n    latitude = lat, # Latitude of the site\n    GDDE = 6.2, # Growing degree days per cm seed depth required for emergence, GDD/cm\n    VREQ  = 505.0, # Vernalization required for max.development rate (VDays)\n    PHINT = 95.0, #\u00a0Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. \n    P1V = 1.85, # development genetic coefficients, vernalization. 1 for spring type, 5 for winter type\n    P1D = 3.675, # development genetic coefficients, Photoperiod (1 - 6, low - high sensitive to day length)\n)\n</pre> #\u00a0Initialization of variables  params = dict(     sowing_date = sowing_date, # Sowing date in YYYY-MM-DD     latitude = lat, # Latitude of the site     GDDE = 6.2, # Growing degree days per cm seed depth required for emergence, GDD/cm     VREQ  = 505.0, # Vernalization required for max.development rate (VDays)     PHINT = 95.0, #\u00a0Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested.      P1V = 1.85, # development genetic coefficients, vernalization. 1 for spring type, 5 for winter type     P1D = 3.675, # development genetic coefficients, Photoperiod (1 - 6, low - high sensitive to day length) )  <p>Note: All the paramters above are given by default except for <code>sowing_date</code> and <code>latitude</code>.</p> In\u00a0[\u00a0]: Copied! <pre>%%time\n\ngrowstages = determine_phenology_stage(initparams=params, weather=weather_data, dispDates=True, verbose=False)\n</pre> %%time  growstages = determine_phenology_stage(initparams=params, weather=weather_data, dispDates=True, verbose=False)"},{"location":"notebooks/Using_data_from_ERA5_and_GEE/#pywheat","title":"PyWheat\u00b6","text":"<p>Python library for simulation of wheat phenological development, crop growth and yield at large scales.</p> <p>Author:</p> <ul> <li>Ernesto Giron Echeverry (Independent Researcher, e.giron.e@gmail.com)</li> </ul> <p>Last updated: October 16, 2023</p>"},{"location":"notebooks/Using_data_from_ERA5_and_GEE/#load-libraries","title":"Load Libraries\u00b6","text":""},{"location":"notebooks/Using_data_from_ERA5_and_GEE/#load-daily-weather-data-from-era5-using-gee","title":"Load daily weather data from ERA5 using GEE\u00b6","text":"<p>Using GEE allows you to extract weather data in an easy way from any point of the world.</p>"},{"location":"notebooks/Using_data_from_ERA5_and_GEE/#setup-initial-parameters","title":"Setup initial parameters\u00b6","text":""},{"location":"notebooks/Using_data_from_ERA5_and_GEE/#estimate-phenological-stage","title":"Estimate Phenological stage\u00b6","text":""},{"location":"reference/","title":"API reference","text":""},{"location":"reference/#pywheat-classes","title":"PyWheat classes","text":""},{"location":"reference/#pywheat.pheno.crown_temperatures","title":"<code>crown_temperatures(snow_depth=0, Tmin=None, Tmax=None)</code>","text":"<p>Crown temperatures are simulated according to the original routines in CERES-Wheat and the correspond  to air temperatures for non-freezing temperatures. The minimum and maximum crown temperatures (Tcmin and Tcmax)  are calculated according to the maximum and minimun air temperatures (Tmax and Tmin), respectively.</p> <p>Parameters:</p> Name Type Description Default <code>snow_depth</code> <code>int</code> <p>Snow depth in centimeters (cm). Default value is set to zero.</p> <code>0</code> <code>Tmin</code> <code>float</code> <p>Minimum Temperature (\u00b0C)</p> <code>None</code> <code>Tmax</code> <code>float</code> <p>Maximum Temperature (\u00b0C)</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Tcmin</code> <code>float</code> <p>Minimum Crown Temperature (\u00b0C)</p> <code>Tcmax</code> <code>float</code> <p>Maximum Crown Temperature (\u00b0C)</p> <code>Tcrown</code> <code>float</code> <p>Optimum Crown Temperature (\u00b0C)</p> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def crown_temperatures(snow_depth=0, Tmin=None, Tmax=None):\n    '''\n        Crown temperatures are simulated according to the original routines in CERES-Wheat and the correspond \n        to air temperatures for non-freezing temperatures. The minimum and maximum crown temperatures (Tcmin and Tcmax) \n        are calculated according to the maximum and minimun air temperatures (Tmax and Tmin), respectively.\n\n        Parameters:\n            snow_depth (int): Snow depth in centimeters (cm). Default value is set to zero.\n            Tmin (float): Minimum Temperature (\u00b0C)\n            Tmax (float): Maximum Temperature (\u00b0C)\n\n        Returns:\n            Tcmin (float): Minimum Crown Temperature (\u00b0C)\n            Tcmax (float): Maximum Crown Temperature (\u00b0C)\n            Tcrown (float): Optimum Crown Temperature (\u00b0C)\n\n    '''\n    if (Tmin is None or Tmax is None):\n        print(\"Please check out your inputs.\")\n        return\n\n    Tcmax = None\n    Tcmin = None\n\n    def calc_CrownTemp(T, snow_depth=0):\n        Tcrown = T\n        snow_depth = min(snow_depth, 15)\n        if (T &lt; 0.0):\n            Tcrown = 2.0 + T * (0.4 + 0.0018 * (snow_depth - 15)**2 )\n        return Tcrown\n\n    # Crown temperature for maximum development rate\n    Tcmax = calc_CrownTemp(Tmax, snow_depth)\n    # Crown temperature when snow is present and TMIN &lt; 0.\n    Tcmin = calc_CrownTemp(Tmin, snow_depth)\n\n    Tcrown = (Tcmax + Tcmin) / 2 \n\n    return Tcmax, Tcmin, Tcrown\n</code></pre>"},{"location":"reference/#pywheat.pheno.day_length","title":"<code>day_length(DOY=1, lat=0.0, p=0.0)</code>","text":"<p>Length of the day for a specific site</p> <p>Day length is calculated from day of year (DOY), latitude and the civil twilight using  standard astronomical equations. Twilight is defined as the interval between sunrise or  sunset and the time whan the true center of the sun is 6\u00b0 below the horizon.</p> <p>Parameters:</p> Name Type Description Default <code>DOY</code> <code>int</code> <p>Day of year</p> <code>1</code> <code>lat</code> <code>float</code> <p>Latitude of the site in celsius degrees</p> <code>0.0</code> <code>p</code> <code>float</code> <p>Sun angle with the horizon. eg. p = 6.0 : civil twilight,         p = 0.0 : day starts / ends when sun is even with the horizon.         Default value p=0</p> <code>0.0</code> <p>Returns:</p> Name Type Description <code>daylength</code> <code>float</code> <p>A daylength for the specific site</p> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def day_length(DOY=1, lat=0.0, p=0.0):\n    '''\n        Length of the day for a specific site\n\n        Day length is calculated from day of year (DOY), latitude and the civil twilight using \n        standard astronomical equations. Twilight is defined as the interval between sunrise or \n        sunset and the time whan the true center of the sun is 6\u00b0 below the horizon.\n\n        Parameters:\n            DOY (int): Day of year\n            lat (float): Latitude of the site in celsius degrees\n            p (float):  Sun angle with the horizon. eg. p = 6.0 : civil twilight,\n                        p = 0.0 : day starts / ends when sun is even with the horizon.\n                        Default value p=0\n\n        Returns: \n            daylength (float): A daylength for the specific site\n\n    '''\n    S1 = math.sin(lat * 0.0174533) #\u00a0np.sin(np.deg2rad(lat))\n    C1 = math.cos(lat * 0.0174533) # np.cos(np.deg2rad(lat))\n    DEC = 0.4093 * math.sin( 0.0172 * (DOY - 82.2) )\n    DLV = ( ( -S1 * math.sin(DEC) - 0.1047 ) / ( C1 * math.cos(DEC) ) )\n    DLV = max(DLV,-0.87)\n    TWILEN = 7.639 * math.acos(DLV)\n\n    #\u00a0Another way to calculate\n    #latInRad = np.deg2rad(lat)\n    #revolutionAngle = 0.2163108 + 2*np.arctan(0.9671396*np.tan(0.00860 *(dayOfYear - 186)))\n    #declinationAngle = np.arcsin(0.39795*np.cos(revolutionAngle))\n    #value = (np.sin(np.deg2rad(p)) + (np.sin(latInRad)*np.sin(declinationAngle))) / (np.cos(latInRad)*np.cos(declinationAngle))\n    #if value &lt;= -1.0: \n    #    return  0.0\n    #if value &gt;= 1.0: \n    #    return 24.0\n    #else: \n    #    return 24 - (24/np.pi)*np.arccos(value)\n\n\n    return TWILEN\n</code></pre>"},{"location":"reference/#pywheat.pheno.determine_anthesis_stage","title":"<code>determine_anthesis_stage(initparams=None, verbose=False)</code>","text":"<p>Estimate Wheat phenological stages using an improved PyWheat model calibrated  with IWIN datasets (ESWYT, IDYN, HTWYT and SAWYT nurseries)</p> <p>Parameters:</p> Name Type Description Default <code>initparams</code> <code>dict</code> <p>A dictionary with initial parameters</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>Display comments during the processes. Default is False</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>weather</code> <code>object</code> <p>A table or dataframe with weather data for the site</p> <code>TT_TBASE</code> <code>float</code> <p>Base temperature for estimate Thermal time. Default 0.0</p> <code>TT_TEMPERATURE_OPTIMUM</code> <code>float</code> <p>Thermal time optimum temperature. Default 26</p> <code>TT_TEMPERATURE_MAXIMUM</code> <code>float</code> <p>Thermal time maximum temperature. Default 34</p> <code>CIVIL_TWILIGHT</code> <code>float</code> <p>Sun angle with the horizon. eg. p = 6.0 : civil twilight. Default 0.0</p> <code>HI</code> <code>float</code> <p>Hardiness Index. Default 0.0 </p> <code>SNOW</code> <code>float</code> <p>Snow fall. Default 0.0</p> <code>SDEPTH</code> <code>float</code> <p>Sowing depth in cm. Default 3.0 cm</p> <code>GDDE</code> <code>float</code> <p>Growing degree days per cm seed depth required for emergence, Default 6.2 GDD/cm.</p> <code>DSGFT</code> <code>float</code> <p>GDD from End Ear Growth to Start Grain Filling period. Default 200 degree-days</p> <code>VREQ</code> <code> (float</code> <p>Vernalization required for max.development rate (VDays). Default 505 degree-days</p> <code>PHINT</code> <code>float</code> <p>Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. Default 95.0 degree-days</p> <code>P1V</code> <code>float</code> <p>Development genetic coefficients, vernalization. 1 for spring type, 5 for winter type. Default 4.85</p> <code>P1D</code> <code>float</code> <p>Development genetic coefficients, Photoperiod (1 - 6, low- high sensitive to day length). Default 3.675</p> <code>P5</code> <code>float</code> <p>Grain filling degree days. Old value was divided by 10. Default 500 degree-days.</p> <code>P6</code> <code>float</code> <p>Approximate the thermal time from physiological maturity to harvest. Default 250.</p> <code>DAYS_GERMIMATION_LIMIT</code> <code>float</code> <p>Threshold for days to germination. Default 40</p> <code>TT_EMERGENCE_LIMIT</code> <code>int</code> <p>Threshold for thermal time to emergence. Default 300 degree-days</p> <code>TT_TDU_LIMIT</code> <code>float</code> <p>Threshold for thermal development units (TDU). Default 400  degree-days</p> <code>ADAH</code> <code>int</code> <p>Number of days after heading. A threshold used for anthesis date after planting. Default is 6 days after heading.</p> <p>Returns:</p> Name Type Description <code>growstages</code> <code>dict</code> <p>A dictionary with all phenological stages and addtional useful information</p> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def determine_anthesis_stage(initparams=None, verbose=False):\n    '''\n        Estimate Wheat phenological stages using an improved PyWheat model calibrated \n        with IWIN datasets (ESWYT, IDYN, HTWYT and SAWYT nurseries)\n\n        Parameters:\n            initparams (dict): A dictionary with initial parameters\n            verbose (bool): Display comments during the processes. Default is False\n\n        Attributes:\n            weather (object): A table or dataframe with weather data for the site\n            TT_TBASE (float): Base temperature for estimate Thermal time. Default 0.0\n            TT_TEMPERATURE_OPTIMUM (float): Thermal time optimum temperature. Default 26\n            TT_TEMPERATURE_MAXIMUM (float): Thermal time maximum temperature. Default 34\n            CIVIL_TWILIGHT (float): Sun angle with the horizon. eg. p = 6.0 : civil twilight. Default 0.0\n            HI (float): Hardiness Index. Default 0.0 \n            SNOW (float): Snow fall. Default 0.0\n            SDEPTH (float): Sowing depth in cm. Default 3.0 cm\n            GDDE (float): Growing degree days per cm seed depth required for emergence, Default 6.2 GDD/cm.\n            DSGFT (float): GDD from End Ear Growth to Start Grain Filling period. Default 200 degree-days\n            VREQ  (float): Vernalization required for max.development rate (VDays). Default 505 degree-days\n            PHINT (float): Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. Default 95.0 degree-days\n            P1V (float): Development genetic coefficients, vernalization. 1 for spring type, 5 for winter type. Default 4.85\n            P1D (float): Development genetic coefficients, Photoperiod (1 - 6, low- high sensitive to day length). Default 3.675\n            P5 (float): Grain filling degree days. Old value was divided by 10. Default 500 degree-days.\n            P6 (float): Approximate the thermal time from physiological maturity to harvest. Default 250.\n            DAYS_GERMIMATION_LIMIT (float): Threshold for days to germination. Default 40\n            TT_EMERGENCE_LIMIT (int): Threshold for thermal time to emergence. Default 300 degree-days\n            TT_TDU_LIMIT (float): Threshold for thermal development units (TDU). Default 400  degree-days\n            ADAH (int): Number of days after heading. A threshold used for anthesis date after planting. Default is 6 days after heading.\n\n        Returns:\n            growstages (dict): A dictionary with all phenological stages and addtional useful information\n\n    '''\n    if (initparams is None):\n        print(\"Please check out the input parameters\")\n        return\n\n    #\u00a0Initialization of variables \n    params = dict(\n        weather = None, # Weather data of the site\n        sowing_date = \"\", # Sowing date in YYYY-MM-DD\n        latitude = -90.0, # Latitude of the site\n        longitude = -180.0, #\u00a0Longitude of the site\n        genotype = \"\", # Name of the grand parent in IWIN pedigrees database \n        TT_TBASE = 0.0, # Base Temperature, 2.0 to estimate HI\n        TT_TEMPERATURE_OPTIMUM = 26, # Thermal time optimum temperature\n        TT_TEMPERATURE_MAXIMUM = 34, # Thermal time maximum temperature\n        CIVIL_TWILIGHT = 0.0, # Sun angle with the horizon. eg. p = 6.0 : civil twilight,\n        HI = 0.0, # Hardiness Index\n        SNOW = 0, #\u00a0Snow fall\n        SDEPTH = 3.0, # Sowing depth in cm\n        GDDE = 6.2, # Growing degree days per cm seed depth required for emergence, GDD/cm\n        DSGFT = 200, #\u00a0GDD from End Ear Growth to Start Grain Filling period\n        VREQ  = 505.0, # Vernalization required for max.development rate (VDays)\n        PHINT = 95.0, #\u00a0Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. \n        P1V = 1.0, # development genetic coefficients, vernalization. 1 for spring type, 5 for winter type\n        P1D = 3.675, # development genetic coefficients, Photoperiod (1 - 6, low- high sensitive to day length)\n        P5 = 500, # grain filling degree days eg. 500 degree-days. Old value was divided by 10.\n        P6 = 250, # approximate the thermal time from physiological maturity to harvest\n        DAYS_GERMIMATION_LIMIT = 40, #\u00a0threshold for days to germination\n        TT_EMERGENCE_LIMIT = 300, #\u00a0threshold for thermal time to emergence\n        TT_TDU_LIMIT = 400, # threshold for thermal development units (TDU)\n        ADAH = 6, # threshold for anthesis date after planting. This is a 6 days after heading.\n    )\n    if (initparams is not None):\n        params = {**params, **initparams}\n\n    #\u00a0Validate\n    if (params['sowing_date']==\"\" or params['sowing_date'] is None):\n        print(\"Sowing date not defined\")\n        return\n    if (params['latitude']==-90.0 or params['latitude'] is None):\n        print(\"Problem with location of the site. Check the geographic coordinates.\")\n        return\n    if (params['weather'] is None):\n        print(\"Weather data is not available\")\n        return\n    else:\n        weather = params['weather']\n\n    # ---------------------\n    # GDD limits\n    # ---------------------\n    #P3 = params['PHINT'] * 2\n    #P4 = params['DSGFT'] #200 # APSIM-Wheat = 120 #\u00a0GDD from End Ear Growth to Start Grain Filling period\n\n    growstages = {\n            '7': {'istage_old': 'Sowing', 'istage': 'Fallow', 'desc': 'No crop present to Sowing', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '8': {'istage_old': 'Germinate', 'istage': 'Sowing', 'desc': 'Sowing to Germination', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '9': {'istage_old': 'Emergence', 'istage': 'Germinate', 'desc': 'Emergence to End of Juvenile', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '1': {'istage_old': 'Term Spklt', 'istage': 'Emergence', 'desc': 'Emergence to End of Juvenile', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '2': {'istage_old': 'End Veg', 'istage': 'End Juveni', 'desc': 'End of Juvenile to End of Vegetative growth', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '2.5': {'istage_old': 'Anthesis', 'istage': 'Anthesis', 'desc': 'Anthesis', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '3': {'istage_old': 'End Ear Gr', 'istage': 'End Veg', 'desc': 'End of Vegetative Growth to End of Ear Grow', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n\n    }\n\n    class StageFailed(Exception):\n        def __init__(self, m, istage, err):\n            self.message = m\n            self.istage = istage\n            self.err = err\n        def __str__(self):\n            return self.message + f\" Stage ({self.istage}) - \" + f\"Error: {self.err}\"\n\n    # --------------------------------------------------------------------------\n    # DETERMINE SOWING DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 7\n    try:\n        SOWING_DATE = pd.to_datetime(str(params['sowing_date']), format='%Y-%m-%d' )\n        DOY = pd.to_datetime(SOWING_DATE).dayofyear\n\n        growstages[f'{ISTAGE}']['date'] = str(SOWING_DATE).split(' ')[0]\n        growstages[f'{ISTAGE}']['DOY'] = int(DOY)\n        growstages[f'{ISTAGE}']['AGE'] = 0\n        growstages[f'{ISTAGE}']['SUMDTT'] = 0\n        growstages[f'{ISTAGE}']['DAP'] = 0\n        #print(\"Sowing date:\", SOWING_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem initializing the determination of phenological stage. Please check your input parameters such as sowing date or latitude of the site\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE GERMINATION  DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 8\n    try:\n        SUMDTT = 0.0\n        #VF = 0.0\n        DAP = 0\n        ndays = 1 #\u00a0Seed germination is a rapid process and is assumed to occur in one day\n        w = weather[(weather['DATE']==(SOWING_DATE + pd.DateOffset(days=ndays)) )].reset_index(drop=True)\n        GERMINATION_DATE = ''\n        Tmin = float(w.iloc[ndays-1]['TMIN'])\n        Tmax = float(w.iloc[ndays-1]['TMAX'])\n        # Thermal time\n        DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                       Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                       Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n        SUMDTT = SUMDTT + DTT\n        GERMINATION_DATE = w.iloc[ndays-1]['DATE']\n        CROP_AGE = str(GERMINATION_DATE - SOWING_DATE).replace(' days 00:00:00','')\n        DAP = DAP + int(CROP_AGE)\n        growstages[f'{ISTAGE}']['date'] = str(GERMINATION_DATE).split(' ')[0]\n        growstages[f'{ISTAGE}']['DOY'] = int(GERMINATION_DATE.dayofyear)\n        growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n        growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n        growstages[f'{ISTAGE}']['DAP'] = DAP\n\n        #print(\"Germination date:\", GERMINATION_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining germination date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE SEEDLING EMERGENCE DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 9\n    P9 = 40 + params['GDDE'] * params['SDEPTH']\n    try:\n        SUMDTT = 0.0\n        #print(\"Growing degree days from germination to emergence (P9): \",P9) \n        #\u00a0The crop will die if germination has not occurred before a certain period (eg. 40 days)\n\n        EMERGENCE_DATE = ''\n        w = weather[weather['DATE']&gt;=GERMINATION_DATE].reset_index(drop=True)\n        for i in range(len(w)):\n            Tmin = float(w.iloc[i]['TMIN'])\n            Tmax = float(w.iloc[i]['TMAX'])\n            DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                           Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                           Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n            SUMDTT = SUMDTT + DTT\n\n            if (SUMDTT &gt;= P9 or SUMDTT &gt; params['TT_EMERGENCE_LIMIT']):\n                EMERGENCE_DATE = w.iloc[i]['DATE']\n                CROP_AGE = str(EMERGENCE_DATE - GERMINATION_DATE).replace(' days 00:00:00','')\n                DAP = DAP + int(CROP_AGE)\n                growstages[f'{ISTAGE}']['date'] = str(EMERGENCE_DATE).split(' ')[0]\n                growstages[f'{ISTAGE}']['DOY'] = int(EMERGENCE_DATE.dayofyear)\n                growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                growstages[f'{ISTAGE}']['DAP'] = DAP\n                #print(\"Thermal time reached at DAP \", i+1, str(EMERGENCE_DATE), CROP_AGE, DAP, round(SUMDTT, 1))\n                break\n\n        #print(\"Emergence date: \", EMERGENCE_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining emergence date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # --------------------------------------------------------------------------------------\n    #\u00a0DETERMINE DURATION OF VEGETATIVE PHASE (END JUVENILE DATE - END OF VEGETATION GROWTH\n    # --------------------------------------------------------------------------------------\n    ISTAGE = 1\n    try: \n        isVernalization = True\n        SUMDTT = SUMDTT - P9 \n        CUMVD = 0\n        TDU = 0\n        DF = 0.001\n\n        w = weather[weather['DATE']&gt;=EMERGENCE_DATE].reset_index(drop=True)\n        END_JUVENILE_DATE = ''\n        for i in range(len(w)):\n            Tmin = float(w.iloc[i]['TMIN'])\n            Tmax = float(w.iloc[i]['TMAX'])\n            DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                           Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                           Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n            if (isVernalization is True):\n                Tcmax, Tcmin, Tcrown = crown_temperatures(snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax)\n                CUMVD = vernalization(Tcrown, Tmin, Tmax, CUMVD)\n                if (CUMVD &lt; params['VREQ']):\n                    VF = vernalization_factor(P1V=params['P1V'], dV=CUMVD, ISTAGE=ISTAGE)\n                    if (VF &lt; 0.3):\n                        TDU = TDU + DTT * min(VF, DF)\n                    else:\n                        DOY = pd.to_datetime(w.iloc[i]['DATE']).dayofyear\n                        TWILEN = day_length(DOY=DOY, lat=params['latitude'], p=params['CIVIL_TWILIGHT'])\n                        DF = photoperiod_factor(P1D=params['P1D'], day_length=TWILEN)\n                        TDU = TDU + DTT * min(VF, DF)\n                    SUMDTT = TDU\n                else:\n                    isVernalization = False\n            else:\n                SUMDTT = SUMDTT + DTT\n\n            if (SUMDTT &gt; P9 ): #or SUMDTT &gt; TT_emergence when reached the lower TT\n                END_JUVENILE_DATE = w.iloc[i]['DATE']\n                CROP_AGE = str(END_JUVENILE_DATE - EMERGENCE_DATE).replace(' days 00:00:00','')\n                DAP = DAP + int(CROP_AGE)\n                growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                growstages[f'{ISTAGE}']['date'] = str(END_JUVENILE_DATE).split(' ')[0]\n                growstages[f'{ISTAGE}']['DOY'] = int(END_JUVENILE_DATE.dayofyear)\n                growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                growstages[f'{ISTAGE}']['DAP'] = DAP\n                #print(\"Thermal time reached at DAP \", i+1, str(END_JUVENILE_DATE), CROP_AGE, DAP, round(SUMDTT, 1))\n                break\n            #if (DTT &gt; params['TT_EMERGENCE_LIMIT']): # TT_EMERGENCE_LIMIT = 300,\n            #    #\u00a0The crop will die if germination has not occurred before a certain period (eg. 40 days or 300oC d)\n            #    print(\"The crop died because emergence has not occurred before {} degree-days\".format(params['TT_EMERGENCE_LIMIT']))\n\n        #print(\"End Juvenile date: \", END_JUVENILE_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of juvenile date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE END VEGETATION DATE - End of Juvenile to End of Vegetative growth\n    # --------------------------------------------------------------------------\n    ISTAGE = 1 #\u00a0&lt;- Note: this must continue with 1 as previous stage (Term Spklt = Emergence to End of Juvenile + End of Juvenile to End of Vegetative growth)\n    try:\n        isVernalization = True\n        VF = 1.0\n        w = weather[weather['DATE']&gt;=END_JUVENILE_DATE].reset_index(drop=True)\n        END_VEGETATION_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                Tcmax, Tcmin, Tcrown = crown_temperatures(snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax)\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                if (isVernalization is True):\n                    Tcmax, Tcmin, Tcrown = crown_temperatures(snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax)\n                    CUMVD = vernalization(Tcrown, Tmin, Tmax, CUMVD)\n                    if (CUMVD &lt; params['VREQ']):\n                        VF = vernalization_factor(P1V=params['P1V'], dV=CUMVD, ISTAGE=ISTAGE)\n                        if (VF &lt; 0.3):\n                            TDU = TDU + DTT * min(VF, DF)\n                        else:\n                            DOY = pd.to_datetime(w.iloc[i]['DATE']).dayofyear\n                            TWILEN = day_length(DOY=DOY, lat=params['latitude'], p=params['CIVIL_TWILIGHT'])\n                            DF = photoperiod_factor(P1D=params['P1D'], day_length=TWILEN)\n                            TDU = TDU + DTT * min(VF, DF)\n                        SUMDTT = TDU\n                    else:\n                        isVernalization = False\n                else:\n                    SUMDTT = SUMDTT + DTT\n\n                #\u00a0When this reduced thermal time accumulation (TDU) reaches \n                #\u00a0400 degree days, Stage 1 development ends\n                if (SUMDTT &gt; (params['TT_TDU_LIMIT'] * (params['PHINT'] / 95.0)) ):\n                    END_VEGETATION_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(END_VEGETATION_DATE - END_JUVENILE_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    #\u00a0Sum of the two phases\n                    CROP_AGE_2 = str(END_VEGETATION_DATE - EMERGENCE_DATE).replace(' days 00:00:00','')\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE_2) #\u00a0Sum of the last two phases\n                    growstages[f'{ISTAGE}']['date'] = str(END_VEGETATION_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(END_VEGETATION_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    #if (verbose is True):\n                    #    print(\"End of Juvenile: Thermal time reached at days duration \", i+1,\n                    #          str(END_VEGETATION_DATE), CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n        else:\n            print(\"Error reading weather data for vegetation phase\")\n\n        # print(\"End of Vegeation Growth \", END_VEGETATION_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of vegetation growth date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # ----------------------------------------------------------------------------------------------\n    #\u00a0DETERMINE END OF EAR GROWTH - End of Vegetative Growth to End of Ear Grow (End leaf growth)\n    #-----------------------------------------------------------------------------------------------\n    ISTAGE = 2 #\u00a0Terminal spikelet initiation to the end of leaf growth - CERES Stage 2\n    try:\n        SUMDTT = 0.0\n        P2 = params['PHINT'] * 3\n\n        w = weather[weather['DATE']&gt;=END_VEGETATION_DATE].reset_index(drop=True)\n        END_OF_EAR_GROWTH_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                # Thermal time\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                SUMDTT = SUMDTT + DTT\n\n                if (SUMDTT &gt;= P2):\n                    END_OF_EAR_GROWTH_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(END_OF_EAR_GROWTH_DATE - END_VEGETATION_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['date'] = str(END_OF_EAR_GROWTH_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(END_OF_EAR_GROWTH_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    #if (verbose is True):\n                    #    print(\"Thermal time reached at days duration \", i+1, str(END_OF_EAR_GROWTH_DATE), \n                    #          CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n\n        #if (verbose is True):\n        #    print(\"End of Ear growth\",END_OF_EAR_GROWTH_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of ear growth date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n    #\n    # ----------------------------------------------------------------------------------------------\n    # DETERMINE ANTHESIS\n    # ----------------------------------------------------------------------------------------------\n    #\u00a0Anthesis date was estimated as occurring 7 d after heading. (based on McMaster and Smika, 1988; McMaster and Wilhelm, 2003; G. S. McMaster, unpubl. data)\n    #\u00a0Here we used 6 days according to IWIN reported anthesis\n    ISTAGE = 2.5\n    ADAH = params['ADAH']\n    CROP_AGE = DAP + ADAH\n    ANTHESIS_DATE = END_OF_EAR_GROWTH_DATE + pd.DateOffset(days=ADAH)\n    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n    growstages[f'{ISTAGE}']['date'] = str(ANTHESIS_DATE).split(' ')[0]\n    growstages[f'{ISTAGE}']['DOY'] = int(ANTHESIS_DATE.dayofyear)\n    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1) # TODOs: Esto debe recalcularse\n    growstages[f'{ISTAGE}']['DAP'] = DAP + ADAH\n\n    #\n    return growstages\n</code></pre>"},{"location":"reference/#pywheat.pheno.determine_emergence_stage","title":"<code>determine_emergence_stage(initparams=None, verbose=False)</code>","text":"<p>Estimate Wheat phenological stages using CERES-Wheat model</p> <p>Parameters:</p> Name Type Description Default <code>initparams</code> <code>dict</code> <p>A dictionary with initial parameters</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>Display comments during the processes. Default is False</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>weather</code> <code>object</code> <p>A table or dataframe with weather data for the site</p> <code>TT_TBASE</code> <code>float</code> <p>Base temperature for estimate Thermal time. Default 0.0</p> <code>TT_TEMPERATURE_OPTIMUM</code> <code>float</code> <p>Thermal time optimum temperature. Default 26</p> <code>TT_TEMPERATURE_MAXIMUM</code> <code>float</code> <p>Thermal time maximum temperature. Default 34</p> <code>CIVIL_TWILIGHT</code> <code>float</code> <p>Sun angle with the horizon. eg. p = 6.0 : civil twilight. Default 0.0</p> <code>HI</code> <code>float</code> <p>Hardiness Index. Default 0.0 </p> <code>SNOW</code> <code>float</code> <p>Snow fall. Default 0.0</p> <code>SDEPTH</code> <code>float</code> <p>Sowing depth in cm. Default 3.0 cm</p> <code>GDDE</code> <code>float</code> <p>Growing degree days per cm seed depth required for emergence, Default 6.2 GDD/cm.</p> <code>DAYS_GERMIMATION_LIMIT</code> <code>float</code> <p>Threshold for days to germination. Default 40</p> <code>TT_EMERGENCE_LIMIT</code> <code>float</code> <p>Threshold for thermal time to emergence. Default 300</p> <p>Returns:</p> Name Type Description <code>growstages</code> <code>dict</code> <p>A dictionary with all phenological stages and addtional useful information</p> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def determine_emergence_stage(initparams=None, verbose=False):\n    '''\n        Estimate Wheat phenological stages using CERES-Wheat model\n\n        Parameters:\n            initparams (dict): A dictionary with initial parameters\n            verbose (bool): Display comments during the processes. Default is False\n\n        Attributes:\n            weather (object): A table or dataframe with weather data for the site\n            TT_TBASE (float): Base temperature for estimate Thermal time. Default 0.0\n            TT_TEMPERATURE_OPTIMUM (float): Thermal time optimum temperature. Default 26\n            TT_TEMPERATURE_MAXIMUM (float): Thermal time maximum temperature. Default 34\n            CIVIL_TWILIGHT (float): Sun angle with the horizon. eg. p = 6.0 : civil twilight. Default 0.0\n            HI (float): Hardiness Index. Default 0.0 \n            SNOW (float): Snow fall. Default 0.0\n            SDEPTH (float): Sowing depth in cm. Default 3.0 cm\n            GDDE (float): Growing degree days per cm seed depth required for emergence, Default 6.2 GDD/cm.\n            DAYS_GERMIMATION_LIMIT (float): Threshold for days to germination. Default 40\n            TT_EMERGENCE_LIMIT (float): Threshold for thermal time to emergence. Default 300\n\n        Returns:\n            growstages (dict): A dictionary with all phenological stages and addtional useful information\n\n    '''\n    if (initparams is None):\n        print(\"Please check out the input parameters\")\n        return\n\n    #\u00a0Initialization of variables \n    params = dict(\n        weather = None, # Weather data of the site\n        sowing_date = \"\", # Sowing date in YYYY-MM-DD\n        latitude = -99.0, # Latitude of the site\n        TT_TBASE = 0.0, # Base Temperature, 2.0 to estimate HI\n        TT_TEMPERATURE_OPTIMUM = 26, # Thermal time optimum temperature\n        TT_TEMPERATURE_MAXIMUM = 34, # Thermal time maximum temperature\n        CIVIL_TWILIGHT = 0.0, # Sun angle with the horizon. eg. p = 6.0 : civil twilight,\n        HI = 0.0, # Hardiness Index\n        SNOW = 0, #\u00a0Snow fall\n        SDEPTH = 3.0, # Sowing depth in cm\n        GDDE = 6.2, # Growing degree days per cm seed depth required for emergence, GDD/cm\n        DAYS_GERMIMATION_LIMIT = 40, #\u00a0threshold for days to germination\n        TT_EMERGENCE_LIMIT = 300, #\u00a0threshold for thermal time to emergence\n    )\n    if (initparams is not None):\n        params = {**params, **initparams}\n\n    if (params['sowing_date'] is None or params['sowing_date']==\"\"):\n        print(\"Sowing date not valid\")\n        return\n    if (params['latitude'] is None or params['latitude']==-99.0):\n        print(\"Latitude of the site not valid\")\n        return\n    if (params['weather'] is None):\n        print(\"Weather data is not available\")\n        return\n    else:\n        weather = params['weather']\n\n\n    growstages = {\n            '7': {'istage_old': 'Sowing', 'istage': 'Fallow', 'desc': 'No crop present to Sowing', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '8': {'istage_old': 'Germinate', 'istage': 'Sowing', 'desc': 'Sowing to Germination', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '9': {'istage_old': 'Emergence', 'istage': 'Germinate', 'desc': 'Emergence to End of Juvenile', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''}\n    }\n\n    class StageFailed(Exception):\n        def __init__(self, m, istage, err):\n            self.message = m\n            self.istage = istage\n            self.err = err\n        def __str__(self):\n            return self.message + f\" Stage ({self.istage}) - \" + f\"Error: {self.err}\"\n\n    # --------------------------------------------------------------------------\n    # DETERMINE SOWING DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 7\n    try:\n        SOWING_DATE = pd.to_datetime(str(params['sowing_date']), format='%Y-%m-%d' )\n        DOY = pd.to_datetime(SOWING_DATE).dayofyear\n\n        growstages[f'{ISTAGE}']['date'] = str(SOWING_DATE).split(' ')[0]\n        growstages[f'{ISTAGE}']['DOY'] = int(DOY)\n        growstages[f'{ISTAGE}']['AGE'] = 0\n        growstages[f'{ISTAGE}']['SUMDTT'] = 0\n        growstages[f'{ISTAGE}']['DAP'] = 0\n        #print(\"Sowing date:\", SOWING_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem initializing the determination of phenological stage. Please check your input parameters such as sowing date or latitude of the site\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE GERMINATION  DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 8\n    try:\n        SUMDTT = 0.0\n        #VF = 0.0\n        DAP = 0\n        ndays = 1 #\u00a0Seed germination is a rapid process and is assumed to occur in one day\n        w = weather[(weather['DATE']==(SOWING_DATE + pd.DateOffset(days=ndays)) )].reset_index(drop=True)\n        GERMINATION_DATE = ''\n        Tmin = float(w.iloc[ndays-1]['TMIN'])\n        Tmax = float(w.iloc[ndays-1]['TMAX'])\n        # Thermal time\n        DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                       Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                       Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n        SUMDTT = SUMDTT + DTT\n        GERMINATION_DATE = w.iloc[ndays-1]['DATE']\n        CROP_AGE = str(GERMINATION_DATE - SOWING_DATE).replace(' days 00:00:00','')\n        DAP = DAP + int(CROP_AGE)\n        growstages[f'{ISTAGE}']['date'] = str(GERMINATION_DATE).split(' ')[0]\n        growstages[f'{ISTAGE}']['DOY'] = int(GERMINATION_DATE.dayofyear)\n        growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n        growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n        growstages[f'{ISTAGE}']['DAP'] = DAP\n\n        #print(\"Germination date:\", GERMINATION_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining germination date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE SEEDLING EMERGENCE DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 9\n    try:\n        P9 = 40 + params['GDDE'] * params['SDEPTH'] #Default values\n        SUMDTT = 0.0\n        #print(\"Growing degree days from germination to emergence (P9): \",P9) \n        #\u00a0The crop will die if germination has not occurred before a certain period (eg. 40 days)\n        w = weather[weather['DATE']&gt;=GERMINATION_DATE].reset_index(drop=True)\n        EMERGENCE_DATE = ''\n        for i in range(len(w)):\n            Tmin = float(w.iloc[i]['TMIN'])\n            Tmax = float(w.iloc[i]['TMAX'])\n            DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                           Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                           Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n            SUMDTT = SUMDTT + DTT\n\n            if (SUMDTT &gt;= P9 or SUMDTT &gt; params['TT_EMERGENCE_LIMIT']):\n                EMERGENCE_DATE = w.iloc[i]['DATE']\n                CROP_AGE = str(EMERGENCE_DATE - GERMINATION_DATE).replace(' days 00:00:00','')\n                DAP = DAP + int(CROP_AGE)\n                growstages[f'{ISTAGE}']['date'] = str(EMERGENCE_DATE).split(' ')[0]\n                growstages[f'{ISTAGE}']['DOY'] = int(EMERGENCE_DATE.dayofyear)\n                growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                growstages[f'{ISTAGE}']['DAP'] = DAP\n                #print(\"Thermal time reached at DAP \", i+1, str(EMERGENCE_DATE), CROP_AGE, DAP, round(SUMDTT, 1))\n                break\n\n        #print(\"Emergence date: \", EMERGENCE_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining emergence date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n    #\n    return growstages\n</code></pre>"},{"location":"reference/#pywheat.pheno.determine_heading_stage","title":"<code>determine_heading_stage(initparams=None, verbose=False)</code>","text":"<p>Estimate Wheat phenological stages using an improved PyWheat model calibrated  with IWIN datasets (ESWYT, IDYN, HTWYT and SAWYT nurseries)</p> <p>Parameters:</p> Name Type Description Default <code>initparams</code> <code>dict</code> <p>A dictionary with initial parameters</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>Display comments during the processes. Default is False</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>weather</code> <code>object</code> <p>A table or dataframe with weather data for the site</p> <code>TT_TBASE</code> <code>float</code> <p>Base temperature for estimate Thermal time. Default 0.0</p> <code>TT_TEMPERATURE_OPTIMUM</code> <code>float</code> <p>Thermal time optimum temperature. Default 26</p> <code>TT_TEMPERATURE_MAXIMUM</code> <code>float</code> <p>Thermal time maximum temperature. Default 34</p> <code>CIVIL_TWILIGHT</code> <code>float</code> <p>Sun angle with the horizon. eg. p = 6.0 : civil twilight. Default 0.0</p> <code>HI</code> <code>float</code> <p>Hardiness Index. Default 0.0 </p> <code>SNOW</code> <code>float</code> <p>Snow fall. Default 0.0</p> <code>SDEPTH</code> <code>float</code> <p>Sowing depth in cm. Default 3.0 cm</p> <code>GDDE</code> <code>float</code> <p>Growing degree days per cm seed depth required for emergence, Default 6.2 GDD/cm.</p> <code>DSGFT</code> <code>float</code> <p>GDD from End Ear Growth to Start Grain Filling period. Default 200 degree-days</p> <code>VREQ</code> <code> (float</code> <p>Vernalization required for max.development rate (VDays). Default 505 degree-days</p> <code>PHINT</code> <code>float</code> <p>Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. Default 95.0 degree-days</p> <code>P1V</code> <code>float</code> <p>Development genetic coefficients, vernalization. 1 for spring type, 5 for winter type. Default 4.85</p> <code>P1D</code> <code>float</code> <p>Development genetic coefficients, Photoperiod (1 - 6, low- high sensitive to day length). Default 3.675</p> <code>P5</code> <code>float</code> <p>Grain filling degree days. Old value was divided by 10. Default 500 degree-days.</p> <code>P6</code> <code>float</code> <p>Approximate the thermal time from physiological maturity to harvest. Default 250.</p> <code>DAYS_GERMIMATION_LIMIT</code> <code>float</code> <p>Threshold for days to germination. Default 40</p> <code>TT_EMERGENCE_LIMIT</code> <code>int</code> <p>Threshold for thermal time to emergence. Default 300 degree-days</p> <code>TT_TDU_LIMIT</code> <code>float</code> <p>Threshold for thermal development units (TDU). Default 400  degree-days</p> <code>ADAH</code> <code>int</code> <p>Number of days after heading. A threshold used for anthesis date after planting. Default is 6 days after heading.</p> <p>Returns:</p> Name Type Description <code>growstages</code> <code>dict</code> <p>A dictionary with all phenological stages and addtional useful information</p> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def determine_heading_stage(initparams=None, verbose=False):\n    '''\n        Estimate Wheat phenological stages using an improved PyWheat model calibrated \n        with IWIN datasets (ESWYT, IDYN, HTWYT and SAWYT nurseries)\n\n        Parameters:\n            initparams (dict): A dictionary with initial parameters\n            verbose (bool): Display comments during the processes. Default is False\n\n        Attributes:\n            weather (object): A table or dataframe with weather data for the site\n            TT_TBASE (float): Base temperature for estimate Thermal time. Default 0.0\n            TT_TEMPERATURE_OPTIMUM (float): Thermal time optimum temperature. Default 26\n            TT_TEMPERATURE_MAXIMUM (float): Thermal time maximum temperature. Default 34\n            CIVIL_TWILIGHT (float): Sun angle with the horizon. eg. p = 6.0 : civil twilight. Default 0.0\n            HI (float): Hardiness Index. Default 0.0 \n            SNOW (float): Snow fall. Default 0.0\n            SDEPTH (float): Sowing depth in cm. Default 3.0 cm\n            GDDE (float): Growing degree days per cm seed depth required for emergence, Default 6.2 GDD/cm.\n            DSGFT (float): GDD from End Ear Growth to Start Grain Filling period. Default 200 degree-days\n            VREQ  (float): Vernalization required for max.development rate (VDays). Default 505 degree-days\n            PHINT (float): Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. Default 95.0 degree-days\n            P1V (float): Development genetic coefficients, vernalization. 1 for spring type, 5 for winter type. Default 4.85\n            P1D (float): Development genetic coefficients, Photoperiod (1 - 6, low- high sensitive to day length). Default 3.675\n            P5 (float): Grain filling degree days. Old value was divided by 10. Default 500 degree-days.\n            P6 (float): Approximate the thermal time from physiological maturity to harvest. Default 250.\n            DAYS_GERMIMATION_LIMIT (float): Threshold for days to germination. Default 40\n            TT_EMERGENCE_LIMIT (int): Threshold for thermal time to emergence. Default 300 degree-days\n            TT_TDU_LIMIT (float): Threshold for thermal development units (TDU). Default 400  degree-days\n            ADAH (int): Number of days after heading. A threshold used for anthesis date after planting. Default is 6 days after heading.\n\n        Returns:\n            growstages (dict): A dictionary with all phenological stages and addtional useful information\n\n    '''\n    if (initparams is None):\n        print(\"Please check out the input parameters\")\n        return\n\n    #\u00a0Initialization of variables \n    params = dict(\n        weather = None, # Weather data of the site\n        sowing_date = \"\", # Sowing date in YYYY-MM-DD\n        latitude = -90.0, # Latitude of the site\n        longitude = -180.0, #\u00a0Longitude of the site\n        genotype = \"\", # Name of the grand parent in IWIN pedigrees database \n        TT_TBASE = 0.0, # Base Temperature, 2.0 to estimate HI\n        TT_TEMPERATURE_OPTIMUM = 26, # Thermal time optimum temperature\n        TT_TEMPERATURE_MAXIMUM = 34, # Thermal time maximum temperature\n        CIVIL_TWILIGHT = 0.0, # Sun angle with the horizon. eg. p = 6.0 : civil twilight,\n        HI = 0.0, # Hardiness Index\n        SNOW = 0, #\u00a0Snow fall\n        SDEPTH = 3.0, # Sowing depth in cm\n        GDDE = 6.2, # Growing degree days per cm seed depth required for emergence, GDD/cm\n        DSGFT = 200, #\u00a0GDD from End Ear Growth to Start Grain Filling period\n        VREQ  = 505.0, # Vernalization required for max.development rate (VDays)\n        PHINT = 95.0, #\u00a0Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. \n        P1V = 1.0, # development genetic coefficients, vernalization. 1 for spring type, 5 for winter type\n        P1D = 3.675, # development genetic coefficients, Photoperiod (1 - 6, low- high sensitive to day length)\n        P5 = 500, # grain filling degree days eg. 500 degree-days. Old value was divided by 10.\n        P6 = 250, # approximate the thermal time from physiological maturity to harvest\n        DAYS_GERMIMATION_LIMIT = 40, #\u00a0threshold for days to germination\n        TT_EMERGENCE_LIMIT = 300, #\u00a0threshold for thermal time to emergence\n        TT_TDU_LIMIT = 400, # threshold for thermal development units (TDU)\n        ADAH = 6, # threshold for anthesis date after planting. This is a 6 days after heading.\n    )\n    if (initparams is not None):\n        params = {**params, **initparams}\n\n    #\u00a0Validate\n    if (params['sowing_date']==\"\" or params['sowing_date'] is None):\n        print(\"Sowing date not defined\")\n        return\n    if (params['latitude']==-90.0 or params['latitude'] is None):\n        print(\"Problem with location of the site. Check the geographic coordinates.\")\n        return\n    if (params['weather'] is None):\n        print(\"Weather data is not available\")\n        return\n    else:\n        weather = params['weather']\n\n    # ---------------------\n    # GDD limits\n    # ---------------------\n    #P2 = params['PHINT'] * 3\n    #P3 = params['PHINT'] * 2\n    #P4 = params['DSGFT'] #200 # APSIM-Wheat = 120 #\u00a0GDD from End Ear Growth to Start Grain Filling period\n    #P5 = params['P5'] #430 + params['P5'] * 20\n    #P6 = params['P5'] #250\n    #P9 = 40 + params['GDDE'] * params['SDEPTH'] \n\n    growstages = {\n            '7': {'istage_old': 'Sowing', 'istage': 'Fallow', 'desc': 'No crop present to Sowing', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '8': {'istage_old': 'Germinate', 'istage': 'Sowing', 'desc': 'Sowing to Germination', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '9': {'istage_old': 'Emergence', 'istage': 'Germinate', 'desc': 'Emergence to End of Juvenile', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '1': {'istage_old': 'Term Spklt', 'istage': 'Emergence', 'desc': 'Emergence to End of Juvenile', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '2': {'istage_old': 'End Veg', 'istage': 'End Juveni', 'desc': 'End of Juvenile to End of Vegetative growth', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''}\n    }\n\n    class StageFailed(Exception):\n        def __init__(self, m, istage, err):\n            self.message = m\n            self.istage = istage\n            self.err = err\n        def __str__(self):\n            return self.message + f\" Stage ({self.istage}) - \" + f\"Error: {self.err}\"\n\n    # --------------------------------------------------------------------------\n    # DETERMINE SOWING DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 7\n    try:\n        SOWING_DATE = pd.to_datetime(str(params['sowing_date']), format='%Y-%m-%d' )\n        DOY = pd.to_datetime(SOWING_DATE).dayofyear\n\n        growstages[f'{ISTAGE}']['date'] = str(SOWING_DATE).split(' ')[0]\n        growstages[f'{ISTAGE}']['DOY'] = int(DOY)\n        growstages[f'{ISTAGE}']['AGE'] = 0\n        growstages[f'{ISTAGE}']['SUMDTT'] = 0\n        growstages[f'{ISTAGE}']['DAP'] = 0\n        #print(\"Sowing date:\", SOWING_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem initializing the determination of phenological stage. Please check your input parameters such as sowing date or latitude of the site\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE GERMINATION  DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 8\n    try:\n        SUMDTT = 0.0\n        #VF = 0.0\n        DAP = 0\n        ndays = 1 #\u00a0Seed germination is a rapid process and is assumed to occur in one day\n        w = weather[(weather['DATE']==(SOWING_DATE + pd.DateOffset(days=ndays)) )].reset_index(drop=True)\n        GERMINATION_DATE = ''\n        Tmin = float(w.iloc[ndays-1]['TMIN'])\n        Tmax = float(w.iloc[ndays-1]['TMAX'])\n        # Thermal time\n        DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                       Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                       Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n        SUMDTT = SUMDTT + DTT\n        GERMINATION_DATE = w.iloc[ndays-1]['DATE']\n        CROP_AGE = str(GERMINATION_DATE - SOWING_DATE).replace(' days 00:00:00','')\n        DAP = DAP + int(CROP_AGE)\n        growstages[f'{ISTAGE}']['date'] = str(GERMINATION_DATE).split(' ')[0]\n        growstages[f'{ISTAGE}']['DOY'] = int(GERMINATION_DATE.dayofyear)\n        growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n        growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n        growstages[f'{ISTAGE}']['DAP'] = DAP\n\n        #print(\"Germination date:\", GERMINATION_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining germination date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE SEEDLING EMERGENCE DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 9\n    P9 = 40 + params['GDDE'] * params['SDEPTH']\n    try:\n        SUMDTT = 0.0\n        #print(\"Growing degree days from germination to emergence (P9): \",P9) \n        #\u00a0The crop will die if germination has not occurred before a certain period (eg. 40 days)\n\n        EMERGENCE_DATE = ''\n        w = weather[weather['DATE']&gt;=GERMINATION_DATE].reset_index(drop=True)\n        for i in range(len(w)):\n            Tmin = float(w.iloc[i]['TMIN'])\n            Tmax = float(w.iloc[i]['TMAX'])\n            DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                           Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                           Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n            SUMDTT = SUMDTT + DTT\n\n            if (SUMDTT &gt;= P9 or SUMDTT &gt; params['TT_EMERGENCE_LIMIT']):\n                EMERGENCE_DATE = w.iloc[i]['DATE']\n                CROP_AGE = str(EMERGENCE_DATE - GERMINATION_DATE).replace(' days 00:00:00','')\n                DAP = DAP + int(CROP_AGE)\n                growstages[f'{ISTAGE}']['date'] = str(EMERGENCE_DATE).split(' ')[0]\n                growstages[f'{ISTAGE}']['DOY'] = int(EMERGENCE_DATE.dayofyear)\n                growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                growstages[f'{ISTAGE}']['DAP'] = DAP\n                #print(\"Thermal time reached at DAP \", i+1, str(EMERGENCE_DATE), CROP_AGE, DAP, round(SUMDTT, 1))\n                break\n\n        #print(\"Emergence date: \", EMERGENCE_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining emergence date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # --------------------------------------------------------------------------------------\n    #\u00a0DETERMINE DURATION OF VEGETATIVE PHASE (END JUVENILE DATE - END OF VEGETATION GROWTH\n    # --------------------------------------------------------------------------------------\n    ISTAGE = 1\n    try: \n        isVernalization = True\n        SUMDTT = SUMDTT - P9 \n        CUMVD = 0\n        TDU = 0\n        DF = 0.001\n\n        w = weather[weather['DATE']&gt;=EMERGENCE_DATE].reset_index(drop=True)\n        END_JUVENILE_DATE = ''\n        for i in range(len(w)):\n            Tmin = float(w.iloc[i]['TMIN'])\n            Tmax = float(w.iloc[i]['TMAX'])\n            DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                           Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                           Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n            if (isVernalization is True):\n                Tcmax, Tcmin, Tcrown = crown_temperatures(snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax)\n                CUMVD = vernalization(Tcrown, Tmin, Tmax, CUMVD)\n                if (CUMVD &lt; params['VREQ']):\n                    VF = vernalization_factor(P1V=params['P1V'], dV=CUMVD, ISTAGE=ISTAGE)\n                    if (VF &lt; 0.3):\n                        TDU = TDU + DTT * min(VF, DF)\n                    else:\n                        DOY = pd.to_datetime(w.iloc[i]['DATE']).dayofyear\n                        TWILEN = day_length(DOY=DOY, lat=params['latitude'], p=params['CIVIL_TWILIGHT'])\n                        DF = photoperiod_factor(P1D=params['P1D'], day_length=TWILEN)\n                        TDU = TDU + DTT * min(VF, DF)\n                    SUMDTT = TDU\n                else:\n                    isVernalization = False\n            else:\n                SUMDTT = SUMDTT + DTT\n\n            if (SUMDTT &gt; P9 ): #or SUMDTT &gt; TT_emergence when reached the lower TT\n                END_JUVENILE_DATE = w.iloc[i]['DATE']\n                CROP_AGE = str(END_JUVENILE_DATE - EMERGENCE_DATE).replace(' days 00:00:00','')\n                DAP = DAP + int(CROP_AGE)\n                growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                growstages[f'{ISTAGE}']['date'] = str(END_JUVENILE_DATE).split(' ')[0]\n                growstages[f'{ISTAGE}']['DOY'] = int(END_JUVENILE_DATE.dayofyear)\n                growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                growstages[f'{ISTAGE}']['DAP'] = DAP\n                #print(\"Thermal time reached at DAP \", i+1, str(END_JUVENILE_DATE), CROP_AGE, DAP, round(SUMDTT, 1))\n                break\n            #if (DTT &gt; params['TT_EMERGENCE_LIMIT']): # TT_EMERGENCE_LIMIT = 300,\n            #    #\u00a0The crop will die if germination has not occurred before a certain period (eg. 40 days or 300oC d)\n            #    print(\"The crop died because emergence has not occurred before {} degree-days\".format(params['TT_EMERGENCE_LIMIT']))\n\n        #print(\"End Juvenile date: \", END_JUVENILE_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of juvenile date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE END VEGETATION DATE - End of Juvenile to End of Vegetative growth\n    # --------------------------------------------------------------------------\n    ISTAGE = 1 #\u00a0&lt;- Note: this must continue with 1 as previous stage (Term Spklt = Emergence to End of Juvenile + End of Juvenile to End of Vegetative growth)\n    try:\n        isVernalization = True\n        VF = 1.0\n        w = weather[weather['DATE']&gt;=END_JUVENILE_DATE].reset_index(drop=True)\n        END_VEGETATION_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                Tcmax, Tcmin, Tcrown = crown_temperatures(snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax)\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                if (isVernalization is True):\n                    Tcmax, Tcmin, Tcrown = crown_temperatures(snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax)\n                    CUMVD = vernalization(Tcrown, Tmin, Tmax, CUMVD)\n                    if (CUMVD &lt; params['VREQ']):\n                        VF = vernalization_factor(P1V=params['P1V'], dV=CUMVD, ISTAGE=ISTAGE)\n                        if (VF &lt; 0.3):\n                            TDU = TDU + DTT * min(VF, DF)\n                        else:\n                            DOY = pd.to_datetime(w.iloc[i]['DATE']).dayofyear\n                            TWILEN = day_length(DOY=DOY, lat=params['latitude'], p=params['CIVIL_TWILIGHT'])\n                            DF = photoperiod_factor(P1D=params['P1D'], day_length=TWILEN)\n                            TDU = TDU + DTT * min(VF, DF)\n                        SUMDTT = TDU\n                    else:\n                        isVernalization = False\n                else:\n                    SUMDTT = SUMDTT + DTT\n\n                #\u00a0When this reduced thermal time accumulation (TDU) reaches \n                #\u00a0400 degree days, Stage 1 development ends\n                if (SUMDTT &gt; (params['TT_TDU_LIMIT'] * (params['PHINT'] / 95.0)) ):\n                    END_VEGETATION_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(END_VEGETATION_DATE - END_JUVENILE_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    #\u00a0Sum of the two phases\n                    CROP_AGE_2 = str(END_VEGETATION_DATE - EMERGENCE_DATE).replace(' days 00:00:00','')\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE_2) #\u00a0Sum of the last two phases\n                    growstages[f'{ISTAGE}']['date'] = str(END_VEGETATION_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(END_VEGETATION_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    #if (verbose is True):\n                    #    print(\"End of Juvenile: Thermal time reached at days duration \", i+1,\n                    #          str(END_VEGETATION_DATE), CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n        else:\n            print(\"Error reading weather data for vegetation phase\")\n\n        # print(\"End of Vegeation Growth \", END_VEGETATION_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of vegetation growth date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # ----------------------------------------------------------------------------------------------\n    #\u00a0DETERMINE END OF EAR GROWTH - End of Vegetative Growth to End of Ear Grow (End leaf growth)\n    #-----------------------------------------------------------------------------------------------\n    ISTAGE = 2 #\u00a0Terminal spikelet initiation to the end of leaf growth - CERES Stage 2\n    try:\n        SUMDTT = 0.0\n        P2 = params['PHINT'] * 3\n\n        w = weather[weather['DATE']&gt;=END_VEGETATION_DATE].reset_index(drop=True)\n        END_OF_EAR_GROWTH_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                # Thermal time\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                SUMDTT = SUMDTT + DTT\n\n                if (SUMDTT &gt;= P2):\n                    END_OF_EAR_GROWTH_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(END_OF_EAR_GROWTH_DATE - END_VEGETATION_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['date'] = str(END_OF_EAR_GROWTH_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(END_OF_EAR_GROWTH_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    #if (verbose is True):\n                    #    print(\"Thermal time reached at days duration \", i+1, str(END_OF_EAR_GROWTH_DATE), \n                    #          CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n\n        #if (verbose is True):\n        #    print(\"End of Ear growth\",END_OF_EAR_GROWTH_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of ear growth date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n    #\n    return growstages\n</code></pre>"},{"location":"reference/#pywheat.pheno.determine_maturity_stage","title":"<code>determine_maturity_stage(initparams=None, verbose=False)</code>","text":"<p>Estimate Wheat phenological stages using an improved PyWheat model calibrated  with IWIN datasets (ESWYT, IDYN, HTWYT and SAWYT nurseries)</p> <p>Parameters:</p> Name Type Description Default <code>initparams</code> <code>dict</code> <p>A dictionary with initial parameters</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>Display comments during the processes. Default is False</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>weather</code> <code>object</code> <p>A table or dataframe with weather data for the site</p> <code>TT_TBASE</code> <code>float</code> <p>Base temperature for estimate Thermal time. Default 0.0</p> <code>TT_TEMPERATURE_OPTIMUM</code> <code>float</code> <p>Thermal time optimum temperature. Default 26</p> <code>TT_TEMPERATURE_MAXIMUM</code> <code>float</code> <p>Thermal time maximum temperature. Default 34</p> <code>CIVIL_TWILIGHT</code> <code>float</code> <p>Sun angle with the horizon. eg. p = 6.0 : civil twilight. Default 0.0</p> <code>HI</code> <code>float</code> <p>Hardiness Index. Default 0.0 </p> <code>SNOW</code> <code>float</code> <p>Snow fall. Default 0.0</p> <code>SDEPTH</code> <code>float</code> <p>Sowing depth in cm. Default 3.0 cm</p> <code>GDDE</code> <code>float</code> <p>Growing degree days per cm seed depth required for emergence, Default 6.2 GDD/cm.</p> <code>DSGFT</code> <code>float</code> <p>GDD from End Ear Growth to Start Grain Filling period. Default 200 degree-days</p> <code>VREQ</code> <code> (float</code> <p>Vernalization required for max.development rate (VDays). Default 505 degree-days</p> <code>PHINT</code> <code>float</code> <p>Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. Default 95.0 degree-days</p> <code>P1V</code> <code>float</code> <p>Development genetic coefficients, vernalization. 1 for spring type, 5 for winter type. Default 4.85</p> <code>P1D</code> <code>float</code> <p>Development genetic coefficients, Photoperiod (1 - 6, low- high sensitive to day length). Default 3.675</p> <code>P5</code> <code>float</code> <p>Grain filling degree days. Old value was divided by 10. Default 500 degree-days.</p> <code>P6</code> <code>float</code> <p>Approximate the thermal time from physiological maturity to harvest. Default 250.</p> <code>DAYS_GERMIMATION_LIMIT</code> <code>float</code> <p>Threshold for days to germination. Default 40</p> <code>TT_EMERGENCE_LIMIT</code> <code>int</code> <p>Threshold for thermal time to emergence. Default 300 degree-days</p> <code>TT_TDU_LIMIT</code> <code>float</code> <p>Threshold for thermal development units (TDU). Default 400  degree-days</p> <code>ADAH</code> <code>int</code> <p>Number of days after heading. A threshold used for anthesis date after planting. Default is 6 days after heading.</p> <p>Returns:</p> Name Type Description <code>growstages</code> <code>dict</code> <p>A dictionary with all phenological stages and addtional useful information</p> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def determine_maturity_stage(initparams=None, verbose=False):\n    '''\n        Estimate Wheat phenological stages using an improved PyWheat model calibrated \n        with IWIN datasets (ESWYT, IDYN, HTWYT and SAWYT nurseries)\n\n        Parameters:\n            initparams (dict): A dictionary with initial parameters\n            verbose (bool): Display comments during the processes. Default is False\n\n        Attributes:\n            weather (object): A table or dataframe with weather data for the site\n            TT_TBASE (float): Base temperature for estimate Thermal time. Default 0.0\n            TT_TEMPERATURE_OPTIMUM (float): Thermal time optimum temperature. Default 26\n            TT_TEMPERATURE_MAXIMUM (float): Thermal time maximum temperature. Default 34\n            CIVIL_TWILIGHT (float): Sun angle with the horizon. eg. p = 6.0 : civil twilight. Default 0.0\n            HI (float): Hardiness Index. Default 0.0 \n            SNOW (float): Snow fall. Default 0.0\n            SDEPTH (float): Sowing depth in cm. Default 3.0 cm\n            GDDE (float): Growing degree days per cm seed depth required for emergence, Default 6.2 GDD/cm.\n            DSGFT (float): GDD from End Ear Growth to Start Grain Filling period. Default 200 degree-days\n            VREQ  (float): Vernalization required for max.development rate (VDays). Default 505 degree-days\n            PHINT (float): Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. Default 95.0 degree-days\n            P1V (float): Development genetic coefficients, vernalization. 1 for spring type, 5 for winter type. Default 4.85\n            P1D (float): Development genetic coefficients, Photoperiod (1 - 6, low- high sensitive to day length). Default 3.675\n            P5 (float): Grain filling degree days. Old value was divided by 10. Default 500 degree-days.\n            P6 (float): Approximate the thermal time from physiological maturity to harvest. Default 250.\n            DAYS_GERMIMATION_LIMIT (float): Threshold for days to germination. Default 40\n            TT_EMERGENCE_LIMIT (int): Threshold for thermal time to emergence. Default 300 degree-days\n            TT_TDU_LIMIT (float): Threshold for thermal development units (TDU). Default 400  degree-days\n            ADAH (int): Number of days after heading. A threshold used for anthesis date after planting. Default is 6 days after heading.\n\n        Returns:\n            growstages (dict): A dictionary with all phenological stages and addtional useful information\n\n    '''\n    if (initparams is None):\n        print(\"Please check out the input parameters\")\n        return\n\n    #\u00a0Initialization of variables \n    params = dict(\n        weather = None, # Weather data of the site\n        sowing_date = \"\", # Sowing date in YYYY-MM-DD\n        latitude = -90.0, # Latitude of the site\n        longitude = -180.0, #\u00a0Longitude of the site\n        genotype = \"\", # Name of the grand parent in IWIN pedigrees database \n        TT_TBASE = 0.0, # Base Temperature, 2.0 to estimate HI\n        TT_TEMPERATURE_OPTIMUM = 26, # Thermal time optimum temperature\n        TT_TEMPERATURE_MAXIMUM = 34, # Thermal time maximum temperature\n        CIVIL_TWILIGHT = 0.0, # Sun angle with the horizon. eg. p = 6.0 : civil twilight,\n        HI = 0.0, # Hardiness Index\n        SNOW = 0, #\u00a0Snow fall\n        SDEPTH = 3.0, # Sowing depth in cm\n        GDDE = 6.2, # Growing degree days per cm seed depth required for emergence, GDD/cm\n        DSGFT = 200, #\u00a0GDD from End Ear Growth to Start Grain Filling period\n        VREQ  = 505.0, # Vernalization required for max.development rate (VDays)\n        PHINT = 95.0, #\u00a0Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. \n        P1V = 1.0, # development genetic coefficients, vernalization. 1 for spring type, 5 for winter type\n        P1D = 3.675, # development genetic coefficients, Photoperiod (1 - 6, low- high sensitive to day length)\n        P5 = 500, # grain filling degree days eg. 500 degree-days. Old value was divided by 10.\n        P6 = 250, # approximate the thermal time from physiological maturity to harvest\n        DAYS_GERMIMATION_LIMIT = 40, #\u00a0threshold for days to germination\n        TT_EMERGENCE_LIMIT = 300, #\u00a0threshold for thermal time to emergence\n        TT_TDU_LIMIT = 400, # threshold for thermal development units (TDU)\n        ADAH = 6, # threshold for anthesis date after planting. This is a 6 days after heading.\n    )\n    if (initparams is not None):\n        params = {**params, **initparams}\n\n    #\u00a0Validate\n    if (params['sowing_date']==\"\" or params['sowing_date'] is None):\n        print(\"Sowing date not defined\")\n        return\n    if (params['latitude']==-90.0 or params['latitude'] is None):\n        print(\"Problem with location of the site. Check the geographic coordinates.\")\n        return\n    if (params['weather'] is None):\n        print(\"Weather data is not available\")\n        return\n    else:\n        weather = params['weather']\n\n    # ---------------------\n    # GDD limits\n    # ---------------------\n    #P3 = params['PHINT'] * 2\n    #P4 = params['DSGFT'] #200 # APSIM-Wheat = 120 #\u00a0GDD from End Ear Growth to Start Grain Filling period\n\n    growstages = {\n            '7': {'istage_old': 'Sowing', 'istage': 'Fallow', 'desc': 'No crop present to Sowing', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '8': {'istage_old': 'Germinate', 'istage': 'Sowing', 'desc': 'Sowing to Germination', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '9': {'istage_old': 'Emergence', 'istage': 'Germinate', 'desc': 'Emergence to End of Juvenile', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '1': {'istage_old': 'Term Spklt', 'istage': 'Emergence', 'desc': 'Emergence to End of Juvenile', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '2': {'istage_old': 'End Veg', 'istage': 'End Juveni', 'desc': 'End of Juvenile to End of Vegetative growth', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '2.5': {'istage_old': 'Anthesis', 'istage': 'Anthesis', 'desc': 'Anthesis', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '3': {'istage_old': 'End Ear Gr', 'istage': 'End Veg', 'desc': 'End of Vegetative Growth to End of Ear Grow', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '4': {'istage_old': 'Beg Gr Fil', 'istage': 'End Ear Gr', 'desc': 'End of Ear Growth to Start of Grain Filling', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '5': {'istage_old': 'End Gr Fil', 'istage': 'Beg Gr Fil', 'desc': 'Start of Grain Filling to Maturity', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            #'6': {'istage_old': 'Harvest', 'istage': 'Maturity', 'desc': 'End Gr Fil', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''}\n    }\n\n    class StageFailed(Exception):\n        def __init__(self, m, istage, err):\n            self.message = m\n            self.istage = istage\n            self.err = err\n        def __str__(self):\n            return self.message + f\" Stage ({self.istage}) - \" + f\"Error: {self.err}\"\n\n    # --------------------------------------------------------------------------\n    # DETERMINE SOWING DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 7\n    try:\n        SOWING_DATE = pd.to_datetime(str(params['sowing_date']), format='%Y-%m-%d' )\n        DOY = pd.to_datetime(SOWING_DATE).dayofyear\n\n        growstages[f'{ISTAGE}']['date'] = str(SOWING_DATE).split(' ')[0]\n        growstages[f'{ISTAGE}']['DOY'] = int(DOY)\n        growstages[f'{ISTAGE}']['AGE'] = 0\n        growstages[f'{ISTAGE}']['SUMDTT'] = 0\n        growstages[f'{ISTAGE}']['DAP'] = 0\n        #print(\"Sowing date:\", SOWING_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem initializing the determination of phenological stage. Please check your input parameters such as sowing date or latitude of the site\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE GERMINATION  DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 8\n    try:\n        SUMDTT = 0.0\n        #VF = 0.0\n        DAP = 0\n        ndays = 1 #\u00a0Seed germination is a rapid process and is assumed to occur in one day\n        w = weather[(weather['DATE']==(SOWING_DATE + pd.DateOffset(days=ndays)) )].reset_index(drop=True)\n        GERMINATION_DATE = ''\n        Tmin = float(w.iloc[ndays-1]['TMIN'])\n        Tmax = float(w.iloc[ndays-1]['TMAX'])\n        # Thermal time\n        DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                       Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                       Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n        SUMDTT = SUMDTT + DTT\n        GERMINATION_DATE = w.iloc[ndays-1]['DATE']\n        CROP_AGE = str(GERMINATION_DATE - SOWING_DATE).replace(' days 00:00:00','')\n        DAP = DAP + int(CROP_AGE)\n        growstages[f'{ISTAGE}']['date'] = str(GERMINATION_DATE).split(' ')[0]\n        growstages[f'{ISTAGE}']['DOY'] = int(GERMINATION_DATE.dayofyear)\n        growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n        growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n        growstages[f'{ISTAGE}']['DAP'] = DAP\n\n        #print(\"Germination date:\", GERMINATION_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining germination date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE SEEDLING EMERGENCE DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 9\n    P9 = 40 + params['GDDE'] * params['SDEPTH']\n    try:\n        SUMDTT = 0.0\n        #print(\"Growing degree days from germination to emergence (P9): \",P9) \n        #\u00a0The crop will die if germination has not occurred before a certain period (eg. 40 days)\n\n        EMERGENCE_DATE = ''\n        w = weather[weather['DATE']&gt;=GERMINATION_DATE].reset_index(drop=True)\n        for i in range(len(w)):\n            Tmin = float(w.iloc[i]['TMIN'])\n            Tmax = float(w.iloc[i]['TMAX'])\n            DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                           Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                           Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n            SUMDTT = SUMDTT + DTT\n\n            if (SUMDTT &gt;= P9 or SUMDTT &gt; params['TT_EMERGENCE_LIMIT']):\n                EMERGENCE_DATE = w.iloc[i]['DATE']\n                CROP_AGE = str(EMERGENCE_DATE - GERMINATION_DATE).replace(' days 00:00:00','')\n                DAP = DAP + int(CROP_AGE)\n                growstages[f'{ISTAGE}']['date'] = str(EMERGENCE_DATE).split(' ')[0]\n                growstages[f'{ISTAGE}']['DOY'] = int(EMERGENCE_DATE.dayofyear)\n                growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                growstages[f'{ISTAGE}']['DAP'] = DAP\n                #print(\"Thermal time reached at DAP \", i+1, str(EMERGENCE_DATE), CROP_AGE, DAP, round(SUMDTT, 1))\n                break\n\n        #print(\"Emergence date: \", EMERGENCE_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining emergence date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # --------------------------------------------------------------------------------------\n    #\u00a0DETERMINE DURATION OF VEGETATIVE PHASE (END JUVENILE DATE - END OF VEGETATION GROWTH\n    # --------------------------------------------------------------------------------------\n    ISTAGE = 1\n    try: \n        isVernalization = True\n        SUMDTT = SUMDTT - P9 \n        CUMVD = 0\n        TDU = 0\n        DF = 0.001\n\n        w = weather[weather['DATE']&gt;=EMERGENCE_DATE].reset_index(drop=True)\n        END_JUVENILE_DATE = ''\n        for i in range(len(w)):\n            Tmin = float(w.iloc[i]['TMIN'])\n            Tmax = float(w.iloc[i]['TMAX'])\n            DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                           Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                           Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n            if (isVernalization is True):\n                Tcmax, Tcmin, Tcrown = crown_temperatures(snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax)\n                CUMVD = vernalization(Tcrown, Tmin, Tmax, CUMVD)\n                if (CUMVD &lt; params['VREQ']):\n                    VF = vernalization_factor(P1V=params['P1V'], dV=CUMVD, ISTAGE=ISTAGE)\n                    if (VF &lt; 0.3):\n                        TDU = TDU + DTT * min(VF, DF)\n                    else:\n                        DOY = pd.to_datetime(w.iloc[i]['DATE']).dayofyear\n                        TWILEN = day_length(DOY=DOY, lat=params['latitude'], p=params['CIVIL_TWILIGHT'])\n                        DF = photoperiod_factor(P1D=params['P1D'], day_length=TWILEN)\n                        TDU = TDU + DTT * min(VF, DF)\n                    SUMDTT = TDU\n                else:\n                    isVernalization = False\n            else:\n                SUMDTT = SUMDTT + DTT\n\n            if (SUMDTT &gt; P9 ): #or SUMDTT &gt; TT_emergence when reached the lower TT\n                END_JUVENILE_DATE = w.iloc[i]['DATE']\n                CROP_AGE = str(END_JUVENILE_DATE - EMERGENCE_DATE).replace(' days 00:00:00','')\n                DAP = DAP + int(CROP_AGE)\n                growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                growstages[f'{ISTAGE}']['date'] = str(END_JUVENILE_DATE).split(' ')[0]\n                growstages[f'{ISTAGE}']['DOY'] = int(END_JUVENILE_DATE.dayofyear)\n                growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                growstages[f'{ISTAGE}']['DAP'] = DAP\n                #print(\"Thermal time reached at DAP \", i+1, str(END_JUVENILE_DATE), CROP_AGE, DAP, round(SUMDTT, 1))\n                break\n            #if (DTT &gt; params['TT_EMERGENCE_LIMIT']): # TT_EMERGENCE_LIMIT = 300,\n            #    #\u00a0The crop will die if germination has not occurred before a certain period (eg. 40 days or 300oC d)\n            #    print(\"The crop died because emergence has not occurred before {} degree-days\".format(params['TT_EMERGENCE_LIMIT']))\n\n        #print(\"End Juvenile date: \", END_JUVENILE_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of juvenile date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE END VEGETATION DATE - End of Juvenile to End of Vegetative growth\n    # --------------------------------------------------------------------------\n    ISTAGE = 1 #\u00a0&lt;- Note: this must continue with 1 as previous stage (Term Spklt = Emergence to End of Juvenile + End of Juvenile to End of Vegetative growth)\n    try:\n        isVernalization = True\n        VF = 1.0\n        w = weather[weather['DATE']&gt;=END_JUVENILE_DATE].reset_index(drop=True)\n        END_VEGETATION_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                Tcmax, Tcmin, Tcrown = crown_temperatures(snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax)\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                if (isVernalization is True):\n                    Tcmax, Tcmin, Tcrown = crown_temperatures(snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax)\n                    CUMVD = vernalization(Tcrown, Tmin, Tmax, CUMVD)\n                    if (CUMVD &lt; params['VREQ']):\n                        VF = vernalization_factor(P1V=params['P1V'], dV=CUMVD, ISTAGE=ISTAGE)\n                        if (VF &lt; 0.3):\n                            TDU = TDU + DTT * min(VF, DF)\n                        else:\n                            DOY = pd.to_datetime(w.iloc[i]['DATE']).dayofyear\n                            TWILEN = day_length(DOY=DOY, lat=params['latitude'], p=params['CIVIL_TWILIGHT'])\n                            DF = photoperiod_factor(P1D=params['P1D'], day_length=TWILEN)\n                            TDU = TDU + DTT * min(VF, DF)\n                        SUMDTT = TDU\n                    else:\n                        isVernalization = False\n                else:\n                    SUMDTT = SUMDTT + DTT\n\n                #\u00a0When this reduced thermal time accumulation (TDU) reaches \n                #\u00a0400 degree days, Stage 1 development ends\n                if (SUMDTT &gt; (params['TT_TDU_LIMIT'] * (params['PHINT'] / 95.0)) ):\n                    END_VEGETATION_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(END_VEGETATION_DATE - END_JUVENILE_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    #\u00a0Sum of the two phases\n                    CROP_AGE_2 = str(END_VEGETATION_DATE - EMERGENCE_DATE).replace(' days 00:00:00','')\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE_2) #\u00a0Sum of the last two phases\n                    growstages[f'{ISTAGE}']['date'] = str(END_VEGETATION_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(END_VEGETATION_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    #if (verbose is True):\n                    #    print(\"End of Juvenile: Thermal time reached at days duration \", i+1,\n                    #          str(END_VEGETATION_DATE), CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n        else:\n            print(\"Error reading weather data for vegetation phase\")\n\n        # print(\"End of Vegeation Growth \", END_VEGETATION_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of vegetation growth date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # ----------------------------------------------------------------------------------------------\n    #\u00a0DETERMINE END OF EAR GROWTH - End of Vegetative Growth to End of Ear Grow (End leaf growth)\n    #-----------------------------------------------------------------------------------------------\n    ISTAGE = 2 #\u00a0Terminal spikelet initiation to the end of leaf growth - CERES Stage 2\n    try:\n        SUMDTT = 0.0\n        P2 = params['PHINT'] * 3\n\n        w = weather[weather['DATE']&gt;=END_VEGETATION_DATE].reset_index(drop=True)\n        END_OF_EAR_GROWTH_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                # Thermal time\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                SUMDTT = SUMDTT + DTT\n\n                if (SUMDTT &gt;= P2):\n                    END_OF_EAR_GROWTH_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(END_OF_EAR_GROWTH_DATE - END_VEGETATION_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['date'] = str(END_OF_EAR_GROWTH_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(END_OF_EAR_GROWTH_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    #if (verbose is True):\n                    #    print(\"Thermal time reached at days duration \", i+1, str(END_OF_EAR_GROWTH_DATE), \n                    #          CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n\n        #if (verbose is True):\n        #    print(\"End of Ear growth\",END_OF_EAR_GROWTH_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of ear growth date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n    #\n    # ----------------------------------------------------------------------------------------------\n    # DETERMINE ANTHESIS\n    # ----------------------------------------------------------------------------------------------\n    #\u00a0Anthesis date was estimated as occurring 7 d after heading. (based on McMaster and Smika, 1988; McMaster and Wilhelm, 2003; G. S. McMaster, unpubl. data)\n    #\u00a0Here we used 6 days according to IWIN reported anthesis\n    ISTAGE = 2.5\n    ADAH = params['ADAH']\n    CROP_AGE = DAP + ADAH\n    ANTHESIS_DATE = END_OF_EAR_GROWTH_DATE + pd.DateOffset(days=ADAH)\n    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n    growstages[f'{ISTAGE}']['date'] = str(ANTHESIS_DATE).split(' ')[0]\n    growstages[f'{ISTAGE}']['DOY'] = int(ANTHESIS_DATE.dayofyear)\n    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1) # TODOs: Esto debe recalcularse\n    growstages[f'{ISTAGE}']['DAP'] = DAP + ADAH\n    #\n\n    # ----------------------------------------------------------------------------------------------\n    # DETERMINE END OF PANNICLE GROWTH - End pannicle growth - End of Ear Growth to Start of Grain Filling\n    # ----------------------------------------------------------------------------------------------\n    ISTAGE = 3 # Preanthesis ear growth - CERES Stage 3.\n    try:\n        SUMDTT = 0.0 #SUMDTT - P2\n        P3 = params['PHINT'] * 2\n        #TBASE=0.0\n\n        w = weather[weather['DATE']&gt;END_OF_EAR_GROWTH_DATE].reset_index(drop=True)\n        END_OF_PANNICLE_GROWTH_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                # Thermal time\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                SUMDTT = SUMDTT + DTT\n\n                if (SUMDTT &gt;= P3):\n                    END_OF_PANNICLE_GROWTH_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(END_OF_PANNICLE_GROWTH_DATE - END_OF_EAR_GROWTH_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['date'] = str(END_OF_PANNICLE_GROWTH_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(END_OF_PANNICLE_GROWTH_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    growstages[f'{ISTAGE}']['status'] = 1\n                    #if (verbose is True):\n                    #    print(\"Thermal time reached at days duration \", i+1, str(END_OF_PANNICLE_GROWTH_DATE), \n                    #          CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n\n        #if (verbose is True):\n        #    print(\"End of Pre-Anthesis Ear growth\",END_OF_PANNICLE_GROWTH_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of pre-anthesis earh growth date (end of pannicle growth date).\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # ----------------------------------------------------------------------------------------------\n    # DETERMINE BEGIN GRAIN FILLING - Grain fill - Start of Grain Filling to Maturity\n    # ----------------------------------------------------------------------------------------------\n    ISTAGE = 4 # Preanthesis ear growth to the beginning of grain filling - CERES Stage 4.\n    try: \n        P4 = params['DSGFT'] #200 GDD # APSIM-Wheat = 120\n        SUMDTT = 0.0 #SUMDTT - P3\n\n        w = weather[weather['DATE']&gt;=END_OF_PANNICLE_GROWTH_DATE].reset_index(drop=True)\n        BEGIN_GRAIN_FILLING_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                # Thermal time\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                SUMDTT = SUMDTT + DTT\n                if (SUMDTT &gt;= P4):\n                    BEGIN_GRAIN_FILLING_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(BEGIN_GRAIN_FILLING_DATE - END_OF_PANNICLE_GROWTH_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['date'] = str(BEGIN_GRAIN_FILLING_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(BEGIN_GRAIN_FILLING_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    growstages[f'{ISTAGE}']['status'] = 1\n                    #if (verbose is True):\n                    #    print(\"Thermal time reached at days duration \", i+1, str(BEGIN_GRAIN_FILLING_DATE), \n                    #          CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n\n        #if (verbose is True):\n        #    print(\"Begining of Grain fill\",BEGIN_GRAIN_FILLING_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining begin of grain fill date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # ----------------------------------------------------------------------------------------------\n    # DETERMINE END GRAIN FILLING - Maturity\n    # ----------------------------------------------------------------------------------------------\n    ISTAGE = 5\n    try:\n        SUMDTT = 0.0 #SUMDTT - P4\n        #P5 = 430 + params['P5'] * 20 # P5 = (0.05 X TT_Maturity) - 21.5. ~500 degree-days\n        P5 = params['P5'] # 400 + 5.0 * 20  \n\n        w = weather[weather['DATE']&gt;=BEGIN_GRAIN_FILLING_DATE].reset_index(drop=True)\n        END_GRAIN_FILLING_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                # Thermal time\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                SUMDTT = SUMDTT + DTT\n                if (SUMDTT &gt;= P5):\n                    END_GRAIN_FILLING_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(END_GRAIN_FILLING_DATE - BEGIN_GRAIN_FILLING_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['date'] = str(END_GRAIN_FILLING_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(END_GRAIN_FILLING_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    growstages[f'{ISTAGE}']['status'] = 1\n                    #if (verbose is True):\n                    #    print(\"Thermal time reached at days duration \", i+1, str(END_GRAIN_FILLING_DATE), \n                    #          CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n\n        #if (verbose is True):\n        #    print(\"End of Grain filling\",END_GRAIN_FILLING_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of grain fill date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n    #\n    return growstages\n</code></pre>"},{"location":"reference/#pywheat.pheno.determine_phenology_stage","title":"<code>determine_phenology_stage(initparams=None, weather=None, dispDates=True, dispFigPhenology=False, verbose=False)</code>","text":"<p>Estimate Wheat phenological stages using CERES-Wheat model</p> Deprecated. <p>This function was depreciated on Oct 22, 2023.  Please use an updated version named <code>determine_phenology_stages</code></p> <p>Parameters:</p> Name Type Description Default <code>initparams</code> <code>dict</code> <p>A dictionary with initial parameters</p> <code>None</code> <code>weather</code> <code>object</code> <p>A table or dataframe with weather data for the site</p> <code>None</code> <code>dispDates</code> <code>bool</code> <p>Display results in text format. Default is True</p> <code>True</code> <code>dispFigPhenology</code> <code>bool</code> <p>Display a figure with the phenological phases. Default is False</p> <code>False</code> <code>verbose</code> <code>bool</code> <p>Display comments during the processes. Default is False</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>TT_TBASE</code> <code>float</code> <p>Base temperature for estimate Thermal time. Default 0.0</p> <code>TT_TEMPERATURE_OPTIMUM</code> <code>float</code> <p>Thermal time optimum temperature. Default 26</p> <code>TT_TEMPERATURE_MAXIMUM</code> <code>float</code> <p>Thermal time maximum temperature. Default 34</p> <code>CIVIL_TWILIGHT</code> <code>float</code> <p>Sun angle with the horizon. eg. p = 6.0 : civil twilight. Default 0.0</p> <code>HI</code> <code>float</code> <p>Hardiness Index. Default 0.0 </p> <code>SNOW</code> <code>float</code> <p>Snow fall. Default 0.0</p> <code>SDEPTH</code> <code>float</code> <p>Sowing depth in cm. Default 3.0 cm</p> <code>GDDE</code> <code>float</code> <p>Growing degree days per cm seed depth required for emergence, Default 6.2 GDD/cm.</p> <code>DSGFT</code> <code>float</code> <p>GDD from End Ear Growth to Start Grain Filling period. Default 200 degree-days</p> <code>VREQ</code> <code> (float</code> <p>Vernalization required for max.development rate (VDays). Default 505 degree-days</p> <code>PHINT</code> <code>float</code> <p>Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. Default 95.0 degree-days</p> <code>P1V</code> <code>float</code> <p>Development genetic coefficients, vernalization. 1 for spring type, 5 for winter type. Default 4.85</p> <code>P1D</code> <code>float</code> <p>Development genetic coefficients, Photoperiod (1 - 6, low- high sensitive to day length). Default 3.675</p> <code>P5</code> <code>float</code> <p>Grain filling degree days. Old value was divided by 10. Default 500 degree-days.</p> <code>P6</code> <code>float</code> <p>Approximate the thermal time from physiological maturity to harvest. Default 250.</p> <code>DAYS_GERMIMATION_LIMIT</code> <code>float</code> <p>Threshold for days to germination. Default 40</p> <code>TT_EMERGENCE_LIMIT</code> <code>float</code> <p>Threshold for thermal time to emergence. Default 300</p> <code>TT_TDU_LIMIT</code> <code>float</code> <p>Threshold for thermal development units (TDU). Default 400 </p> <p>Returns:</p> Name Type Description <code>growstages</code> <code>dict</code> <p>A dictionary with all phenological stages and addtional useful information</p> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def determine_phenology_stage(initparams=None, weather=None, dispDates=True, dispFigPhenology=False, verbose=False):\n    '''\n        Estimate Wheat phenological stages using CERES-Wheat model\n\n        Warning: Deprecated.\n                This function was depreciated on Oct 22, 2023. \n                Please use an updated version named `determine_phenology_stages`\n\n        Parameters:\n            initparams (dict): A dictionary with initial parameters\n            weather (object): A table or dataframe with weather data for the site\n            dispDates (bool): Display results in text format. Default is True\n            dispFigPhenology (bool): Display a figure with the phenological phases. Default is False\n            verbose (bool): Display comments during the processes. Default is False\n\n        Attributes:\n            TT_TBASE (float): Base temperature for estimate Thermal time. Default 0.0\n            TT_TEMPERATURE_OPTIMUM (float): Thermal time optimum temperature. Default 26\n            TT_TEMPERATURE_MAXIMUM (float): Thermal time maximum temperature. Default 34\n            CIVIL_TWILIGHT (float): Sun angle with the horizon. eg. p = 6.0 : civil twilight. Default 0.0\n            HI (float): Hardiness Index. Default 0.0 \n            SNOW (float): Snow fall. Default 0.0\n            SDEPTH (float): Sowing depth in cm. Default 3.0 cm\n            GDDE (float): Growing degree days per cm seed depth required for emergence, Default 6.2 GDD/cm.\n            DSGFT (float): GDD from End Ear Growth to Start Grain Filling period. Default 200 degree-days\n            VREQ  (float): Vernalization required for max.development rate (VDays). Default 505 degree-days\n            PHINT (float): Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. Default 95.0 degree-days\n            P1V (float): Development genetic coefficients, vernalization. 1 for spring type, 5 for winter type. Default 4.85\n            P1D (float): Development genetic coefficients, Photoperiod (1 - 6, low- high sensitive to day length). Default 3.675\n            P5 (float): Grain filling degree days. Old value was divided by 10. Default 500 degree-days.\n            P6 (float): Approximate the thermal time from physiological maturity to harvest. Default 250.\n            DAYS_GERMIMATION_LIMIT (float): Threshold for days to germination. Default 40\n            TT_EMERGENCE_LIMIT (float): Threshold for thermal time to emergence. Default 300\n            TT_TDU_LIMIT (float): Threshold for thermal development units (TDU). Default 400 \n\n        Returns:\n            growstages (dict): A dictionary with all phenological stages and addtional useful information\n\n    '''\n    if (initparams is None):\n        print(\"Please check out the input parameters\")\n        return\n    if (weather is None):\n        print(\"Weather data is not available\")\n        return\n\n    #\u00a0Initialization of variables \n    params = dict(\n        sowing_date = \"\", # Sowing date in YYYY-MM-DD\n        latitude = -99.0, # Latitude of the site\n        TT_TBASE = 0.0, # Base Temperature, 2.0 to estimate HI\n        TT_TEMPERATURE_OPTIMUM = 26, # Thermal time optimum temperature\n        TT_TEMPERATURE_MAXIMUM = 34, # Thermal time maximum temperature\n        CIVIL_TWILIGHT = 0.0, # Sun angle with the horizon. eg. p = 6.0 : civil twilight,\n        HI = 0.0, # Hardiness Index\n        SNOW = 0, #\u00a0Snow fall\n        SDEPTH = 3.0, # Sowing depth in cm\n        GDDE = 6.2, # Growing degree days per cm seed depth required for emergence, GDD/cm\n        DSGFT = 200, #\u00a0GDD from End Ear Growth to Start Grain Filling period\n        VREQ  = 505.0, # Vernalization required for max.development rate (VDays)\n        PHINT = 95.0, #\u00a0Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. \n        P1V = 1.0, # development genetic coefficients, vernalization. 1 for spring type, 5 for winter type\n        P1D = 3.675, # development genetic coefficients, Photoperiod (1 - 6, low- high sensitive to day length)\n        P5 = 500, # grain filling degree days eg. 500 degree-days. Old value was divided by 10.\n        P6 = 250, # approximate the thermal time from physiological maturity to harvest\n        DAYS_GERMIMATION_LIMIT = 40, #\u00a0threshold for days to germination\n        TT_EMERGENCE_LIMIT = 300, #\u00a0threshold for thermal time to emergence\n        TT_TDU_LIMIT = 400, # threshold for thermal development units (TDU)\n\n    )\n    if (initparams is not None):\n        params = {**params, **initparams}\n\n    # ---------------------\n    # GDD limits\n    # ---------------------\n    P2 = params['PHINT'] * 3\n    P3 = params['PHINT'] * 2\n    P4 = params['DSGFT'] #200 # APSIM-Wheat = 120 #\u00a0GDD from End Ear Growth to Start Grain Filling period\n    P5 = params['P5'] #430 + params['P5'] * 20\n    P6 = params['P5'] #250\n    #P9 = 40 + params['GDDE'] * params['SDEPTH'] \n\n    growstages = {\n            '7': {'istage_old': 'Sowing', 'istage': 'Fallow', 'desc': 'No crop present to Sowing', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '8': {'istage_old': 'Germinate', 'istage': 'Sowing', 'desc': 'Sowing to Germination', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '9': {'istage_old': 'Emergence', 'istage': 'Germinate', 'desc': 'Emergence to End of Juvenile', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '1': {'istage_old': 'Term Spklt', 'istage': 'Emergence', 'desc': 'Emergence to End of Juvenile', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '2': {'istage_old': 'End Veg', 'istage': 'End Juveni', 'desc': 'End of Juvenile to End of Vegetative growth', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '3': {'istage_old': 'End Ear Gr', 'istage': 'End Veg', 'desc': 'End of Vegetative Growth to End of Ear Grow', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '4': {'istage_old': 'Beg Gr Fil', 'istage': 'End Ear Gr', 'desc': 'End of Ear Growth to Start of Grain Filling', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '5': {'istage_old': 'End Gr Fil', 'istage': 'Beg Gr Fil', 'desc': 'Start of Grain Filling to Maturity', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''},\n            '6': {'istage_old': 'Harvest', 'istage': 'Maturity', 'desc': 'End Gr Fil', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':''}\n    }\n\n    class StageFailed(Exception):\n        def __init__(self, m, istage, err):\n            self.message = m\n            self.istage = istage\n            self.err = err\n        def __str__(self):\n            return self.message + f\" Stage ({self.istage}) - \" + f\"Error: {self.err}\"\n\n    # --------------------------------------------------------------------------\n    # DETERMINE SOWING DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 7\n    try:\n        SOWING_DATE = pd.to_datetime(str(params['sowing_date']), format='%Y-%m-%d' )\n        DOY = pd.to_datetime(SOWING_DATE).dayofyear\n\n        growstages[f'{ISTAGE}']['date'] = str(SOWING_DATE).split(' ')[0]\n        growstages[f'{ISTAGE}']['DOY'] = int(DOY)\n        growstages[f'{ISTAGE}']['AGE'] = 0\n        growstages[f'{ISTAGE}']['SUMDTT'] = 0\n        growstages[f'{ISTAGE}']['DAP'] = 0\n        #print(\"Sowing date:\", SOWING_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem initializing the determination of phenological stage. Please check your input parameters such as sowing date or latitude of the site\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE GERMINATION  DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 8\n    try:\n        SUMDTT = 0.0\n        #VF = 0.0\n        DAP = 0\n        ndays = 1 #\u00a0Seed germination is a rapid process and is assumed to occur in one day\n        w = weather[(weather['DATE']==(SOWING_DATE + pd.DateOffset(days=ndays)) )].reset_index(drop=True)\n        GERMINATION_DATE = ''\n        Tmin = float(w.iloc[ndays-1]['TMIN'])\n        Tmax = float(w.iloc[ndays-1]['TMAX'])\n        # Thermal time\n        DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                       Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                       Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n        SUMDTT = SUMDTT + DTT\n        GERMINATION_DATE = w.iloc[ndays-1]['DATE']\n        CROP_AGE = str(GERMINATION_DATE - SOWING_DATE).replace(' days 00:00:00','')\n        DAP = DAP + int(CROP_AGE)\n        growstages[f'{ISTAGE}']['date'] = str(GERMINATION_DATE).split(' ')[0]\n        growstages[f'{ISTAGE}']['DOY'] = int(GERMINATION_DATE.dayofyear)\n        growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n        growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n        growstages[f'{ISTAGE}']['DAP'] = DAP\n\n        #print(\"Germination date:\", GERMINATION_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining germination date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE SEEDLING EMERGENCE DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 9\n    try:\n        P9 = 40 + params['GDDE'] * params['SDEPTH'] #Default values\n        SUMDTT = 0.0\n        #print(\"Growing degree days from germination to emergence (P9): \",P9) \n        #\u00a0The crop will die if germination has not occurred before a certain period (eg. 40 days)\n        w = weather[weather['DATE']&gt;=GERMINATION_DATE].reset_index(drop=True)\n        EMERGENCE_DATE = ''\n        for i in range(len(w)):\n            Tmin = float(w.iloc[i]['TMIN'])\n            Tmax = float(w.iloc[i]['TMAX'])\n            DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                           Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                           Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n            SUMDTT = SUMDTT + DTT\n\n            if (SUMDTT &gt;= P9 or SUMDTT &gt; params['TT_EMERGENCE_LIMIT']):\n                EMERGENCE_DATE = w.iloc[i]['DATE']\n                CROP_AGE = str(EMERGENCE_DATE - GERMINATION_DATE).replace(' days 00:00:00','')\n                DAP = DAP + int(CROP_AGE)\n                growstages[f'{ISTAGE}']['date'] = str(EMERGENCE_DATE).split(' ')[0]\n                growstages[f'{ISTAGE}']['DOY'] = int(EMERGENCE_DATE.dayofyear)\n                growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                growstages[f'{ISTAGE}']['DAP'] = DAP\n                #print(\"Thermal time reached at DAP \", i+1, str(EMERGENCE_DATE), CROP_AGE, DAP, round(SUMDTT, 1))\n                break\n\n        #print(\"Emergence date: \", EMERGENCE_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining emergence date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # --------------------------------------------------------------------------------------\n    #\u00a0DETERMINE DURATION OF VEGETATIVE PAHSE (END JUVENILE DATE - END OF VEGETATION GROWTH\n    # --------------------------------------------------------------------------------------\n    ISTAGE = 1\n    try: \n        isVernalization = True\n        SUMDTT = SUMDTT - P9 \n        CUMVD = 0\n        TDU = 0\n        DF = 0.001\n        shoot_lag = 40 # Assumed to be around 40 \u00b0C d\n        shoot_rate = 1.5 #\u00a01.5 \u00b0C d per mm. dDerived from studies where thermal time to emergence was measured and where sowing depth was known\n        sowing_depth = params['SDEPTH'] * 10.0 #\u00a0mm or 3cm as CERES\n\n        T_emer = shoot_lag + shoot_rate * sowing_depth\n        #print(\"Thermal time to emergence date: {} \u00b0C d\".format( T_emer))\n        #print(\"Thermal time to emergence date in CERES (P9): {} \u00b0C d\".format(P9))\n        TT_emergence = min(T_emer, P9)\n\n        w = weather[weather['DATE']&gt;=EMERGENCE_DATE].reset_index(drop=True)\n        END_JUVENILE_DATE = ''\n        for i in range(len(w)):\n            Tmin = float(w.iloc[i]['TMIN'])\n            Tmax = float(w.iloc[i]['TMAX'])\n            DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                           Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                           Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n            if (isVernalization is True):\n                Tcmax, Tcmin, Tcrown = crown_temperatures(snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax)\n                CUMVD = vernalization(Tcrown, Tmin, Tmax, CUMVD)\n                if (CUMVD &lt; params['VREQ']):\n                    VF = vernalization_factor(P1V=params['P1V'], dV=CUMVD, ISTAGE=ISTAGE)\n                    if (VF &lt; 0.3):\n                        TDU = TDU + DTT * min(VF, DF)\n                    else:\n                        DOY = pd.to_datetime(w.iloc[i]['DATE']).dayofyear\n                        TWILEN = day_length(DOY=DOY, lat=params['latitude'], p=params['CIVIL_TWILIGHT'])\n                        DF = photoperiod_factor(P1D=params['P1D'], day_length=TWILEN)\n                        TDU = TDU + DTT * min(VF, DF)\n                    SUMDTT = TDU\n                else:\n                    isVernalization = False\n            else:\n                SUMDTT = SUMDTT + DTT\n\n            if (SUMDTT &gt; P9 or SUMDTT &gt; TT_emergence): # when reached the lower TT\n                END_JUVENILE_DATE = w.iloc[i]['DATE']\n                CROP_AGE = str(END_JUVENILE_DATE - EMERGENCE_DATE).replace(' days 00:00:00','')\n                DAP = DAP + int(CROP_AGE)\n                growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                growstages[f'{ISTAGE}']['date'] = str(END_JUVENILE_DATE).split(' ')[0]\n                growstages[f'{ISTAGE}']['DOY'] = int(END_JUVENILE_DATE.dayofyear)\n                growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                growstages[f'{ISTAGE}']['DAP'] = DAP\n                #print(\"Thermal time reached at DAP \", i+1, str(END_JUVENILE_DATE), CROP_AGE, DAP, round(SUMDTT, 1))\n                break\n            if (DTT &gt; params['TT_EMERGENCE_LIMIT']): # TT_EMERGENCE_LIMIT = 300,\n                #\u00a0The crop will die if germination has not occurred before a certain period (eg. 40 days or 300oC d)\n                print(\"The crop died because emergence has not occurred before {} degree-days\".format(params['TT_EMERGENCE_LIMIT']))\n\n        #print(\"End Juvenile date: \", END_JUVENILE_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of juvenile date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE END VEGETATION DATE - End of Juvenile to End of Vegetative growth\n    # --------------------------------------------------------------------------\n    ISTAGE = 1 #\u00a0&lt;- Note: this must continue with 1 as previous stage (Term Spklt = Emergence to End of Juvenile + End of Juvenile to End of Vegetative growth)\n    try:\n        isVernalization = True\n        VF = 1.0\n        w = weather[weather['DATE']&gt;=END_JUVENILE_DATE].reset_index(drop=True)\n        END_VEGETATION_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                Tcmax, Tcmin, Tcrown = crown_temperatures(snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax)\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                if (isVernalization is True):\n                    Tcmax, Tcmin, Tcrown = crown_temperatures(snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax)\n                    CUMVD = vernalization(Tcrown, Tmin, Tmax, CUMVD)\n                    if (CUMVD &lt; params['VREQ']):\n                        VF = vernalization_factor(P1V=params['P1V'], dV=CUMVD, ISTAGE=ISTAGE)\n                        if (VF &lt; 0.3):\n                            TDU = TDU + DTT * min(VF, DF)\n                        else:\n                            DOY = pd.to_datetime(w.iloc[i]['DATE']).dayofyear\n                            TWILEN = day_length(DOY=DOY, lat=params['latitude'], p=params['CIVIL_TWILIGHT'])\n                            DF = photoperiod_factor(P1D=params['P1D'], day_length=TWILEN)\n                            TDU = TDU + DTT * min(VF, DF)\n                        SUMDTT = TDU\n                    else:\n                        isVernalization = False\n                else:\n                    SUMDTT = SUMDTT + DTT\n\n                #\u00a0When this reduced thermal time accumulation (TDU) reaches \n                #\u00a0400 degree days, Stage 1 development ends\n                if (SUMDTT &gt; (params['TT_TDU_LIMIT'] * (params['PHINT'] / 95.0)) ):\n                    END_VEGETATION_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(END_VEGETATION_DATE - END_JUVENILE_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    #\u00a0Sum of the two phases\n                    CROP_AGE_2 = str(END_VEGETATION_DATE - EMERGENCE_DATE).replace(' days 00:00:00','')\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE_2) #\u00a0Sum of the last two phases\n                    growstages[f'{ISTAGE}']['date'] = str(END_VEGETATION_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(END_VEGETATION_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    #if (verbose is True):\n                    #    print(\"End of Juvenile: Thermal time reached at days duration \", i+1,\n                    #          str(END_VEGETATION_DATE), CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n        else:\n            print(\"Error reading weather data for vegetation phase\")\n\n        # print(\"End of Vegeation Growth \", END_VEGETATION_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of vegetation growth date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # ----------------------------------------------------------------------------------------------\n    #\u00a0DETERMINE END OF EAR GROWTH - End of Vegetative Growth to End of Ear Grow (End leaf growth)\n    #-----------------------------------------------------------------------------------------------\n    ISTAGE = 2 #\u00a0Terminal spikelet initiation to the end of leaf growth - CERES Stage 2\n    try:\n        SUMDTT = 0.0\n        P2 = params['PHINT'] * 3\n\n        w = weather[weather['DATE']&gt;=END_VEGETATION_DATE].reset_index(drop=True)\n        END_OF_EAR_GROWTH_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                # Thermal time\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                SUMDTT = SUMDTT + DTT\n\n                if (SUMDTT &gt;= P2):\n                    END_OF_EAR_GROWTH_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(END_OF_EAR_GROWTH_DATE - END_VEGETATION_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['date'] = str(END_OF_EAR_GROWTH_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(END_OF_EAR_GROWTH_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    #if (verbose is True):\n                    #    print(\"Thermal time reached at days duration \", i+1, str(END_OF_EAR_GROWTH_DATE), \n                    #          CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n\n        #if (verbose is True):\n        #    print(\"End of Ear growth\",END_OF_EAR_GROWTH_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of ear growth date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # ----------------------------------------------------------------------------------------------\n    # DETERMINE END OF PANNICLE GROWTH - End pannicle growth - End of Ear Growth to Start of Grain Filling\n    # ----------------------------------------------------------------------------------------------\n    ISTAGE = 3 # Preanthesis ear growth - CERES Stage 3.\n    try:\n        SUMDTT = 0.0 #SUMDTT - P2\n        P3 = params['PHINT'] * 2\n        #TBASE=0.0\n\n        w = weather[weather['DATE']&gt;END_OF_EAR_GROWTH_DATE].reset_index(drop=True)\n        END_OF_PANNICLE_GROWTH_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                # Thermal time\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                SUMDTT = SUMDTT + DTT\n\n                if (SUMDTT &gt;= P3):\n                    END_OF_PANNICLE_GROWTH_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(END_OF_PANNICLE_GROWTH_DATE - END_OF_EAR_GROWTH_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['date'] = str(END_OF_PANNICLE_GROWTH_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(END_OF_PANNICLE_GROWTH_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    #if (verbose is True):\n                    #    print(\"Thermal time reached at days duration \", i+1, str(END_OF_PANNICLE_GROWTH_DATE), \n                    #          CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n\n        #if (verbose is True):\n        #    print(\"End of Pre-Anthesis Ear growth\",END_OF_PANNICLE_GROWTH_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of pre-anthesis earh growth date (end of pannicle growth date).\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # ----------------------------------------------------------------------------------------------\n    # DETERMINE BEGIN GRAIN FILLING - Grain fill - Start of Grain Filling to Maturity\n    # ----------------------------------------------------------------------------------------------\n    ISTAGE = 4 # Preanthesis ear growth to the beginning of grain filling - CERES Stage 4.\n    try: \n        P4 = params['DSGFT'] #200 GDD # APSIM-Wheat = 120\n        SUMDTT = 0.0 #SUMDTT - P3\n\n        w = weather[weather['DATE']&gt;=END_OF_PANNICLE_GROWTH_DATE].reset_index(drop=True)\n        BEGIN_GRAIN_FILLING_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                # Thermal time\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                SUMDTT = SUMDTT + DTT\n                if (SUMDTT &gt;= P4):\n                    BEGIN_GRAIN_FILLING_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(BEGIN_GRAIN_FILLING_DATE - END_OF_PANNICLE_GROWTH_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['date'] = str(BEGIN_GRAIN_FILLING_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(BEGIN_GRAIN_FILLING_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    #if (verbose is True):\n                    #    print(\"Thermal time reached at days duration \", i+1, str(BEGIN_GRAIN_FILLING_DATE), \n                    #          CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n\n        #if (verbose is True):\n        #    print(\"Begining of Grain fill\",BEGIN_GRAIN_FILLING_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining begin of grain fill date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # ----------------------------------------------------------------------------------------------\n    # DETERMINE END GRAIN FILLING - Maturity\n    # ----------------------------------------------------------------------------------------------\n    ISTAGE = 5\n    try:\n        SUMDTT = 0.0 #SUMDTT - P4\n        #P5 = 430 + params['P5'] * 20 # P5 = (0.05 X TT_Maturity) - 21.5. ~500 degree-days\n        P5 = params['P5'] # 400 + 5.0 * 20  \n\n        w = weather[weather['DATE']&gt;=BEGIN_GRAIN_FILLING_DATE].reset_index(drop=True)\n        END_GRAIN_FILLING_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                # Thermal time\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                SUMDTT = SUMDTT + DTT\n                if (SUMDTT &gt;= P5):\n                    END_GRAIN_FILLING_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(END_GRAIN_FILLING_DATE - BEGIN_GRAIN_FILLING_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['date'] = str(END_GRAIN_FILLING_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(END_GRAIN_FILLING_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    #if (verbose is True):\n                    #    print(\"Thermal time reached at days duration \", i+1, str(END_GRAIN_FILLING_DATE), \n                    #          CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n\n        #if (verbose is True):\n        #    print(\"End of Grain filling\",END_GRAIN_FILLING_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of grain fill date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # ----------------------------------------------------------------------------------------------\n    # DETERMINE HARVEST - Harvest - End of Grain Filling or Maturity\n    # ----------------------------------------------------------------------------------------------\n    ISTAGE = 6  # Physiological maturity to harvest - CERES Stage 6.\n    try: \n        SUMDTT = 0.0\n        estimateHarvest = True\n        P6 = params['P6']\n\n        if (estimateHarvest is False):\n            HARVEST = END_GRAIN_FILLING_DATE\n            growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n            growstages[f'{ISTAGE}']['date'] = str(HARVEST).split(' ')[0]\n            growstages[f'{ISTAGE}']['DOY'] = int(HARVEST.dayofyear)\n            growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n            growstages[f'{ISTAGE}']['DAP'] = DAP\n        else:\n            # A value of 250 degree-days can be used to approximate the thermal time from physiological maturity to harvest\n            w = weather[weather['DATE']&gt;=END_GRAIN_FILLING_DATE].reset_index(drop=True)\n            HARVEST = ''\n            if (len(w)&gt;0):\n                for i in range(len(w)):\n                    Tmin = float(w.iloc[i]['TMIN'])\n                    Tmax = float(w.iloc[i]['TMAX'])\n                    # Thermal time\n                    DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                                   Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                                   Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                    SUMDTT = SUMDTT + DTT\n                    if (SUMDTT &gt;= P6):\n                        HARVEST = w.iloc[i]['DATE']\n                        CROP_AGE = str(HARVEST - END_GRAIN_FILLING_DATE).replace(' days 00:00:00','')\n                        DAP = DAP + int(CROP_AGE)\n                        growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                        growstages[f'{ISTAGE}']['date'] = str(HARVEST).split(' ')[0]\n                        growstages[f'{ISTAGE}']['DOY'] = int(HARVEST.dayofyear)\n                        growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                        growstages[f'{ISTAGE}']['DAP'] = DAP\n                        #if (verbose is True):\n                        #    print(\"Thermal time reached at days duration \", i+1, str(HARVEST), \n                        #          CROP_AGE, DAP, round(SUMDTT, 1))\n                        break\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining physiological maturity to harvest date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # ---------------------\n    if (dispDates is True):\n        try:\n            print(\"RSTG   GROWTH STAGE      DAP  DOY   CROP AGE   SUMDTT   DATE \")\n            for k in growstages.keys():\n                print(\"{:4}   {:10} {:&gt;10} {:&gt;4} {:&gt;6} {:&gt;12} {:&gt;12}\".format(k, growstages[k]['istage_old'], \n                                                                             growstages[k]['DAP'],\n                                                                             growstages[k]['DOY'], growstages[k]['AGE'],\n                                                                             growstages[k]['SUMDTT'], \n                                                                             growstages[k]['date']))\n        except Exception as err:\n            try:\n                raise StageFailed(\"Problem displaying results.\", -99, err)\n            except StageFailed as x:\n                print(x)\n                return\n\n    if (dispFigPhenology is True):\n        try:\n            drawPhenology(gs=growstages, title='Phenological growth phases of Wheat', dpi=150,\n                         dispPlants=True, topDAPLabel=True, timeSpanLabel=True, topNameStageLabel=True,\n                         topNameStageLabelOpt=True, copyrightLabel=True, \n                         saveFig=False, showFig=True, path_to_save_results='./', \n                         fname='Fig_1_Phenological_Phases_Wheat', fmt='jpg')\n        except Exception as err:\n            try:\n                raise StageFailed(\"Problem displaying figure of phenological stages.\", -99, err)\n            except StageFailed as x:\n                print(x)\n                return\n    # ---------------------\n    return growstages\n</code></pre>"},{"location":"reference/#pywheat.pheno.determine_phenology_stages","title":"<code>determine_phenology_stages(config=None, initparams=None, useDefault=True, dispDates=True, dispFigPhenology=False, verbose=False)</code>","text":"<p>Estimate Wheat phenological stages using an improved PyWheat model calibrated  with IWIN datasets (ESWYT, IDYN, HTWYT and SAWYT nurseries)</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict</code> <p>A dictionary with configuration parameters</p> <code>None</code> <code>initparams</code> <code>dict</code> <p>A dictionary with initial parameters</p> <code>None</code> <code>dispDates</code> <code>bool</code> <p>Display results in text format. Default is True</p> <code>True</code> <code>dispFigPhenology</code> <code>bool</code> <p>Display a figure with the phenological phases. Default is False</p> <code>False</code> <code>verbose</code> <code>bool</code> <p>Display comments during the processes. Default is False</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>weather</code> <code>object</code> <p>A table or dataframe with weather data for the site</p> <code>TT_TBASE</code> <code>float</code> <p>Base temperature for estimate Thermal time. Default 0.0</p> <code>TT_TEMPERATURE_OPTIMUM</code> <code>float</code> <p>Thermal time optimum temperature. Default 26</p> <code>TT_TEMPERATURE_MAXIMUM</code> <code>float</code> <p>Thermal time maximum temperature. Default 34</p> <code>CIVIL_TWILIGHT</code> <code>float</code> <p>Sun angle with the horizon. eg. p = 6.0 : civil twilight. Default 0.0</p> <code>HI</code> <code>float</code> <p>Hardiness Index. Default 0.0 </p> <code>SNOW</code> <code>float</code> <p>Snow fall. Default 0.0</p> <code>SDEPTH</code> <code>float</code> <p>Sowing depth in cm. Default 3.0 cm</p> <code>GDDE</code> <code>float</code> <p>Growing degree days per cm seed depth required for emergence, Default 6.2 GDD/cm.</p> <code>DSGFT</code> <code>float</code> <p>GDD from End Ear Growth to Start Grain Filling period. Default 200 degree-days</p> <code>VREQ</code> <code> (float</code> <p>Vernalization required for max.development rate (VDays). Default 505 degree-days</p> <code>PHINT</code> <code>float</code> <p>Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. Default 95.0 degree-days</p> <code>P1V</code> <code>float</code> <p>Days,optimum vernalizing temperature,required for vernalization. Development genetic coefficients, vernalization. 1 for spring type, 5 for winter type. Default 1.00</p> <code>P1D</code> <code>float</code> <p>Photoperiod response (% reduction in rate/10 h drop in pp). Development genetic coefficients, Photoperiod (1 - 6, low- high sensitive to day length). Default 3.675  #75 DSSAT</p> <code>P5</code> <code>float</code> <p>Grain filling degree days. Old value was divided by 10. Default 500 degree-days.</p> <code>P6</code> <code>float</code> <p>Approximate the thermal time from physiological maturity to harvest. Default 250.</p> <code>DAYS_GERMIMATION_LIMIT</code> <code>float</code> <p>Threshold for days to germination. Default 40</p> <code>TT_EMERGENCE_LIMIT</code> <code>int</code> <p>Threshold for thermal time to emergence. Default 400 degree-days</p> <code>TT_TDU_LIMIT</code> <code>float</code> <p>Threshold for thermal development units (TDU). Default 400  degree-days</p> <code>ADAH</code> <code>int</code> <p>Number of days after heading. A threshold used for anthesis date after planting. Default is 6 days after heading.</p> <code>p5_steps</code> <code>float</code> <p>Step to increase or reduce the P5 parameters. Default 1.0</p> <code>maxP5</code> <code>float</code> <p>Threshold for the maximum value of P5 to reach maturity date. Default 1000</p> <p>Returns:</p> Name Type Description <code>growstages</code> <code>dict</code> <p>A dictionary with all phenological stages and addtional useful information</p> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def determine_phenology_stages(config=None, initparams=None, useDefault=True, \n                               dispDates=True, dispFigPhenology=False, verbose=False):\n    '''\n        Estimate Wheat phenological stages using an improved PyWheat model calibrated \n        with IWIN datasets (ESWYT, IDYN, HTWYT and SAWYT nurseries)\n\n        Parameters:\n            config (dict): A dictionary with configuration parameters\n            initparams (dict): A dictionary with initial parameters\n            dispDates (bool): Display results in text format. Default is True\n            dispFigPhenology (bool): Display a figure with the phenological phases. Default is False\n            verbose (bool): Display comments during the processes. Default is False\n\n        Attributes:\n            weather (object): A table or dataframe with weather data for the site\n            TT_TBASE (float): Base temperature for estimate Thermal time. Default 0.0\n            TT_TEMPERATURE_OPTIMUM (float): Thermal time optimum temperature. Default 26\n            TT_TEMPERATURE_MAXIMUM (float): Thermal time maximum temperature. Default 34\n            CIVIL_TWILIGHT (float): Sun angle with the horizon. eg. p = 6.0 : civil twilight. Default 0.0\n            HI (float): Hardiness Index. Default 0.0 \n            SNOW (float): Snow fall. Default 0.0\n            SDEPTH (float): Sowing depth in cm. Default 3.0 cm\n            GDDE (float): Growing degree days per cm seed depth required for emergence, Default 6.2 GDD/cm.\n            DSGFT (float): GDD from End Ear Growth to Start Grain Filling period. Default 200 degree-days\n            VREQ  (float): Vernalization required for max.development rate (VDays). Default 505 degree-days\n            PHINT (float): Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. Default 95.0 degree-days\n            P1V (float): Days,optimum vernalizing temperature,required for vernalization. Development genetic coefficients, vernalization. 1 for spring type, 5 for winter type. Default 1.00\n            P1D (float): Photoperiod response (% reduction in rate/10 h drop in pp). Development genetic coefficients, Photoperiod (1 - 6, low- high sensitive to day length). Default 3.675  #75 DSSAT\n            P5 (float): Grain filling degree days. Old value was divided by 10. Default 500 degree-days.\n            P6 (float): Approximate the thermal time from physiological maturity to harvest. Default 250.\n            DAYS_GERMIMATION_LIMIT (float): Threshold for days to germination. Default 40\n            TT_EMERGENCE_LIMIT (int): Threshold for thermal time to emergence. Default 400 degree-days\n            TT_TDU_LIMIT (float): Threshold for thermal development units (TDU). Default 400  degree-days\n            ADAH (int): Number of days after heading. A threshold used for anthesis date after planting. Default is 6 days after heading.\n            p5_steps (float): Step to increase or reduce the P5 parameters. Default 1.0\n            maxP5 (float): Threshold for the maximum value of P5 to reach maturity date. Default 1000\n\n        Returns:\n            growstages (dict): A dictionary with all phenological stages and addtional useful information\n\n    '''\n    if (config is None):\n        config = load_configfiles()\n    if (initparams is None):\n        print(\"Please check out the input parameters\")\n        return\n\n    #\u00a0Initialization of variables \n    params = dict(\n        weather = None, # Weather data of the site\n        sowing_date = \"\", # Sowing date in YYYY-MM-DD\n        latitude = -90.0, # Latitude of the site\n        longitude = -180.0, #\u00a0Longitude of the site\n        genotype = \"\", # Name of the grand parent in IWIN pedigrees database \n        TT_TBASE = 0.0, # Base Temperature, 2.0 to estimate HI\n        TT_TEMPERATURE_OPTIMUM = 26, # Thermal time optimum temperature\n        TT_TEMPERATURE_MAXIMUM = 34, # Thermal time maximum temperature\n        CIVIL_TWILIGHT = 0.0, # Sun angle with the horizon. eg. p = 6.0 : civil twilight,\n        HI = 0.0, # Hardiness Index\n        SNOW = 0, #\u00a0Snow fall\n        SDEPTH = 3.0, # Sowing depth in cm\n        GDDE = 6.2, # Growing degree days per cm seed depth required for emergence, GDD/cm\n        DSGFT = 200, #\u00a0GDD from End Ear Growth to Start Grain Filling period\n        VREQ  = 505.0, # Vernalization required for max.development rate (VDays)\n        PHINT = 95.0, #\u00a0Phyllochron. A good estimate for PHINT is 95 degree days. This value for PHINT is appropriate except for spring sown wheat in latitudes greater than 30 degrees north and 30 degrees south, in which cases a value for PHINT of 75 degree days is suggested. \n        P1V = 1.0, # development genetic coefficients, vernalization. 1 for spring type, 5 for winter type\n        P1D = 3.675, # development genetic coefficients, Photoperiod (1 - 6, low- high sensitive to day length)\n        P5 = 500, # grain filling degree days eg. 500 degree-days. Old value was divided by 10.\n        P6 = 250, # approximate the thermal time from physiological maturity to harvest\n        DAYS_GERMIMATION_LIMIT = 40, #\u00a0threshold for days to germination\n        TT_EMERGENCE_LIMIT = 500, #\u00a0threshold for thermal time to emergence\n        TT_TDU_LIMIT = 1000, # threshold for thermal development units (TDU)\n        ADAH = 6, # threshold for anthesis date after planting. This is a 6 days after heading.\n        bruteforce = False,\n        brute_params = {\n            \"obsEmergenceDAP\": None, # Observed days after planting to emergence.\n            \"obsHeadingDAP\": None, # Observed days after planting to heading.\n            \"obsAnthesisDAP\": None, # Observed days after planting to Anthesis.\n            \"obsMaturityDAP\": None, # Observed days after planting to Maturity.\n            \"max_tries\": 300, # Number of maximum tries to find the best value\n            \"error_lim\": 0.5, # Threshold to classify the observation as a good or bad\n            \"gdde_steps\": 1.0, # Step to increase or reduce the GDDE parameters. Default 1.0\n            \"maxGDDE\": 50, #Threshold for the maximum value of GDDE to reach emergence date\n            \"phint_steps\": 1.0, # Step to increase or reduce the PHINT parameters. Default 1.0\n            \"maxPHINT\": 150, #Threshold for the maximum value of PHINT to reach heading date\n            \"adap_steps\": 1, #Step to increase or reduce the ADAH parameters. Default 1\n            \"maxADAP\": 10, #Threshold for the maximum value of ADAH to reach anthesis date.\n            \"p5_steps\": 1, #Step to increase or reduce the P5 parameters. Default 1.0\n            \"maxP5\": 2000 #Threshold for the maximum value of P5 to reach anthesis date.\n        }\n\n    )\n    if (initparams is not None):\n        params = {**params, **initparams}\n\n    #\u00a0Validate\n    if (params['sowing_date']==\"\" or params['sowing_date'] is None):\n        print(\"Sowing date not defined\")\n        return\n    if (params['latitude']==-90.0 or params['latitude'] is None):\n        print(\"Problem with location of the site. Check the geographic coordinates.\")\n        return\n    if (params['weather'] is None):\n        print(\"Weather data is not available\")\n        return\n    else:\n        weather = params['weather']\n    if ((params['bruteforce'] is True )\n        and (params['brute_params'][\"obsEmergenceDAP\"] is None and params['brute_params'][\"obsHeadingDAP\"] is None \n             and params['brute_params'][\"obsAnthesisDAP\"] is None and params['brute_params'][\"obsMaturityDAP\"] is None\n            )):\n        print(\"Parameters to run brute force algorithm are not defined yet.\")\n        return\n\n    # ---------------------\n    # GDD limits\n    # ---------------------\n    P2 = params['PHINT'] * 3\n    P3 = params['PHINT'] * 2\n    P4 = params['DSGFT'] #200 # APSIM-Wheat = 120 #\u00a0GDD from End Ear Growth to Start Grain Filling period\n    P5 = params['P5'] #430 + params['P5'] * 20 # DSSAT v4.8\n    #P6 = params['P5'] #250\n    #P9 = 40 + params['GDDE'] * params['SDEPTH'] \n\n    growstages = {\n            '7': {'istage_old': 'Sowing', 'istage': 'Fallow', 'desc': 'No crop present to Sowing', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':'', 'status':''},\n            '8': {'istage_old': 'Germinate', 'istage': 'Sowing', 'desc': 'Sowing to Germination', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':'', 'status':''},\n            '9': {'istage_old': 'Emergence', 'istage': 'Germinate', 'desc': 'Emergence to End of Juvenile', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':'', 'status':''},\n            '1': {'istage_old': 'Term Spklt', 'istage': 'Emergence', 'desc': 'Emergence to End of Juvenile', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':'', 'status':''},\n            '2': {'istage_old': 'End Veg', 'istage': 'End Juveni', 'desc': 'End of Juvenile to End of Vegetative growth', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':'', 'status':''},\n            '2.5': {'istage_old': 'Anthesis', 'istage': 'Anthesis', 'desc': 'Anthesis', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':'', 'status':''},\n            '3': {'istage_old': 'End Ear Gr', 'istage': 'End Veg', 'desc': 'End of Vegetative Growth to End of Ear Grow', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':'', 'status':''},\n            '4': {'istage_old': 'Beg Gr Fil', 'istage': 'End Ear Gr', 'desc': 'End of Ear Growth to Start of Grain Filling', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':'', 'status':''},\n            '5': {'istage_old': 'End Gr Fil', 'istage': 'Beg Gr Fil', 'desc': 'Start of Grain Filling to Maturity', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':'', 'status':''},\n            '6': {'istage_old': 'Harvest', 'istage': 'Maturity', 'desc': 'End Gr Fil', 'date':'', 'DOY':'', 'AGE':'', 'DAP':'', 'SUMDTT':'', 'status':''}\n    }\n\n    class StageFailed(Exception):\n        def __init__(self, m, istage, err):\n            self.message = m\n            self.istage = istage\n            self.err = err\n        def __str__(self):\n            return self.message + f\" Stage ({self.istage}) - \" + f\"Error: {self.err}\"\n\n    # --------------------------------------------------------------------------\n    # DETERMINE SOWING DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 7\n    try:\n        SOWING_DATE = pd.to_datetime(str(params['sowing_date']), format='%Y-%m-%d' )\n        DOY = pd.to_datetime(SOWING_DATE).dayofyear\n\n        growstages[f'{ISTAGE}']['date'] = str(SOWING_DATE).split(' ')[0]\n        growstages[f'{ISTAGE}']['DOY'] = int(DOY)\n        growstages[f'{ISTAGE}']['AGE'] = 0\n        growstages[f'{ISTAGE}']['SUMDTT'] = 0\n        growstages[f'{ISTAGE}']['DAP'] = 0\n        growstages[f'{ISTAGE}']['status'] = 1\n        #print(\"Sowing date:\", SOWING_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem initializing the determination of phenological stage. Please check your input parameters such as sowing date or latitude of the site\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE GERMINATION  DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 8\n    try:\n        SUMDTT = 0.0\n        #VF = 0.0\n        DAP = 0\n        ndays = 1 #\u00a0Seed germination is a rapid process and is assumed to occur in one day\n        w = weather[(weather['DATE']==(SOWING_DATE + pd.DateOffset(days=ndays)) )].reset_index(drop=True)\n        GERMINATION_DATE = ''\n        Tmin = float(w.iloc[ndays-1]['TMIN'])\n        Tmax = float(w.iloc[ndays-1]['TMAX'])\n        # Thermal time\n        DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                       Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                       Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n        SUMDTT = SUMDTT + DTT\n        GERMINATION_DATE = w.iloc[ndays-1]['DATE']\n        CROP_AGE = str(GERMINATION_DATE - SOWING_DATE).replace(' days 00:00:00','')\n        DAP = DAP + int(CROP_AGE)\n        growstages[f'{ISTAGE}']['date'] = str(GERMINATION_DATE).split(' ')[0]\n        growstages[f'{ISTAGE}']['DOY'] = int(GERMINATION_DATE.dayofyear)\n        growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n        growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n        growstages[f'{ISTAGE}']['DAP'] = DAP\n        growstages[f'{ISTAGE}']['status'] = 1\n\n        #print(\"Germination date:\", GERMINATION_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining germination date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE SEEDLING EMERGENCE DATE\n    # --------------------------------------------------------------------------\n    ISTAGE = 9\n    P9 = 40 + params['GDDE'] * params['SDEPTH'] #Default values defined by user or by CERES-Wheat\n    try:\n        # Get GDDE and SDEPTH parameters\n        e_status = 1\n        if (params['bruteforce']==True and params['brute_params']!={} and \n            params['brute_params'][\"obsEmergenceDAP\"] is not None):\n            #\u00a0using brute force algorithms\n            e_growstages, params, e_status = estimate_emergence_by_bruteforce(params)\n            #params = { **params, **e_params}\n        elif ( useDefault is True and params['longitude']!=-180.0 and params['longitude']!='' \n              and params['longitude'] is not None):\n            ##\u00a0using geographic coordinates and month to extract values by linear regression\n            params = estimate_emergence_by_default(config, params, GERMINATION_DATE)\n        elif (params['longitude']!=-180.0 and params['longitude']!='' and params['longitude'] is not None):\n            ##\u00a0using geographic coordinates\n            params = estimate_emergence_by_coords(config, params)\n        elif (params['genotype']!=\"\" and params['genotype'] is not None):\n            #\u00a0using cultivar or genotype name\n            params = estimate_emergence_by_cultivar(config, params, GERMINATION_DATE)\n\n        #\n        P9 = 40 + params['GDDE'] * params['SDEPTH']\n        SUMDTT = 0.0\n        #print(\"Growing degree days from germination to emergence (P9): \",P9) \n        #\u00a0The crop will die if germination has not occurred before a certain period (eg. 40 days)\n\n        EMERGENCE_DATE = ''\n        w = weather[weather['DATE']&gt;=GERMINATION_DATE].reset_index(drop=True)\n        for i in range(len(w)):\n            Tmin = float(w.iloc[i]['TMIN'])\n            Tmax = float(w.iloc[i]['TMAX'])\n            DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                           Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                           Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n            SUMDTT = SUMDTT + DTT\n\n            if (SUMDTT &gt;= P9 or SUMDTT &gt; params['TT_EMERGENCE_LIMIT']):\n                EMERGENCE_DATE = w.iloc[i]['DATE']\n                CROP_AGE = str(EMERGENCE_DATE - GERMINATION_DATE).replace(' days 00:00:00','')\n                DAP = DAP + int(CROP_AGE)\n                growstages[f'{ISTAGE}']['date'] = str(EMERGENCE_DATE).split(' ')[0]\n                growstages[f'{ISTAGE}']['DOY'] = int(EMERGENCE_DATE.dayofyear)\n                growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                growstages[f'{ISTAGE}']['DAP'] = DAP\n                growstages[f'{ISTAGE}']['status'] = e_status\n                #print(\"Thermal time reached at DAP \", i+1, str(EMERGENCE_DATE), CROP_AGE, DAP, round(SUMDTT, 1))\n                break\n\n        #print(\"Emergence date: \", EMERGENCE_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining emergence date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # --------------------------------------------------------------------------------------\n    #\u00a0DETERMINE DURATION OF VEGETATIVE PAHSE (END JUVENILE DATE - END OF VEGETATION GROWTH\n    # --------------------------------------------------------------------------------------\n    ISTAGE = 1\n    # Get SNOW, VREQ, P1V, P1D,  parameters using geographic coordinates\n    h_status = 1\n    if (params['bruteforce']==True and params['brute_params']!={} and \n        params['brute_params'][\"obsHeadingDAP\"] is not None):\n        #\u00a0using brute force algorithms\n        h_growstages, params, h_status = estimate_heading_by_bruteforce(params)\n        #params = { **params, **h_params}\n    elif ( useDefault is True and params['longitude']!=-180.0 and params['longitude']!='' \n          and params['longitude'] is not None):\n        ##\u00a0using geographic coordinates and month to extract values by linear regression\n        params = estimate_heading_by_default(config, params, EMERGENCE_DATE)\n    elif (params['longitude']!=-180.0 and params['longitude']!='' and params['longitude'] is not None):\n        ##\u00a0using geographic coordinates\n        params = estimate_heading_by_coords(config, params)\n    elif (params['genotype']!=\"\" and params['genotype'] is not None):\n        #\u00a0using cultivar or genotype name\n        params = estimate_heading_by_cultivar(config, params, EMERGENCE_DATE)\n\n    try: \n        isVernalization = True\n        SUMDTT = SUMDTT - P9 \n        CUMVD = 0\n        TDU = 0\n        DF = 0.001\n        shoot_lag = 40 # Assumed to be around 40 \u00b0C d\n        shoot_rate = 1.5 #\u00a01.5 \u00b0C d per mm. dDerived from studies where thermal time to emergence was measured and where sowing depth was known\n        sowing_depth = params['SDEPTH'] * 10.0 #\u00a0mm or 3cm as CERES\n\n        T_emer = shoot_lag + shoot_rate * sowing_depth\n        #print(\"Thermal time to emergence date: {} \u00b0C d\".format( T_emer))\n        #print(\"Thermal time to emergence date in CERES (P9): {} \u00b0C d\".format(P9))\n        TT_emergence = min(T_emer, P9)\n\n        w = weather[weather['DATE']&gt;=EMERGENCE_DATE].reset_index(drop=True)\n        END_JUVENILE_DATE = ''\n        for i in range(len(w)):\n            Tmin = float(w.iloc[i]['TMIN'])\n            Tmax = float(w.iloc[i]['TMAX'])\n            DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                           Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                           Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n            if (isVernalization is True):\n                Tcmax, Tcmin, Tcrown = crown_temperatures(snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax)\n                CUMVD = vernalization(Tcrown, Tmin, Tmax, CUMVD)\n                if (CUMVD &lt; params['VREQ']):\n                    VF = vernalization_factor(P1V=params['P1V'], dV=CUMVD, ISTAGE=ISTAGE)\n                    if (VF &lt; 0.3):\n                        TDU = TDU + DTT * min(VF, DF)\n                    else:\n                        DOY = pd.to_datetime(w.iloc[i]['DATE']).dayofyear\n                        TWILEN = day_length(DOY=DOY, lat=params['latitude'], p=params['CIVIL_TWILIGHT'])\n                        DF = photoperiod_factor(P1D=params['P1D'], day_length=TWILEN)\n                        TDU = TDU + DTT * min(VF, DF)\n                    SUMDTT = TDU\n                else:\n                    isVernalization = False\n            else:\n                SUMDTT = SUMDTT + DTT\n\n            if (SUMDTT &gt; P9 or SUMDTT &gt; TT_emergence): # when reached the lower TT\n                END_JUVENILE_DATE = w.iloc[i]['DATE']\n                CROP_AGE = str(END_JUVENILE_DATE - EMERGENCE_DATE).replace(' days 00:00:00','')\n                DAP = DAP + int(CROP_AGE)\n                growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                growstages[f'{ISTAGE}']['date'] = str(END_JUVENILE_DATE).split(' ')[0]\n                growstages[f'{ISTAGE}']['DOY'] = int(END_JUVENILE_DATE.dayofyear)\n                growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                growstages[f'{ISTAGE}']['DAP'] = DAP\n                growstages[f'{ISTAGE}']['status'] = h_status\n                #print(\"Thermal time reached at DAP \", i+1, str(END_JUVENILE_DATE), CROP_AGE, DAP, round(SUMDTT, 1))\n                break\n            if (DTT &gt; params['TT_EMERGENCE_LIMIT']): # TT_EMERGENCE_LIMIT = 300,\n                #\u00a0The crop will die if germination has not occurred before a certain period (eg. 40 days or 300oC d)\n                print(\"The crop died because emergence has not occurred before {} degree-days\".format(params['TT_EMERGENCE_LIMIT']))\n\n        #print(\"End Juvenile date: \", END_JUVENILE_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of juvenile date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # --------------------------------------------------------------------------\n    #\u00a0DETERMINE END VEGETATION DATE - End of Juvenile to End of Vegetative growth\n    # --------------------------------------------------------------------------\n    ISTAGE = 1 #\u00a0&lt;- Note: this must continue with 1 as previous stage (Term Spklt = Emergence to End of Juvenile + End of Juvenile to End of Vegetative growth)\n    try:\n        isVernalization = True\n        VF = 1.0\n        w = weather[weather['DATE']&gt;=END_JUVENILE_DATE].reset_index(drop=True)\n        END_VEGETATION_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                Tcmax, Tcmin, Tcrown = crown_temperatures(snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax)\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                if (isVernalization is True):\n                    Tcmax, Tcmin, Tcrown = crown_temperatures(snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax)\n                    CUMVD = vernalization(Tcrown, Tmin, Tmax, CUMVD)\n                    if (CUMVD &lt; params['VREQ']):\n                        VF = vernalization_factor(P1V=params['P1V'], dV=CUMVD, ISTAGE=ISTAGE)\n                        if (VF &lt; 0.3):\n                            TDU = TDU + DTT * min(VF, DF)\n                        else:\n                            DOY = pd.to_datetime(w.iloc[i]['DATE']).dayofyear\n                            TWILEN = day_length(DOY=DOY, lat=params['latitude'], p=params['CIVIL_TWILIGHT'])\n                            DF = photoperiod_factor(P1D=params['P1D'], day_length=TWILEN)\n                            TDU = TDU + DTT * min(VF, DF)\n                        SUMDTT = TDU\n                    else:\n                        isVernalization = False\n                else:\n                    SUMDTT = SUMDTT + DTT\n\n                #\u00a0When this reduced thermal time accumulation (TDU) reaches \n                #\u00a0400 degree days, Stage 1 development ends\n                if (SUMDTT &gt; (params['TT_TDU_LIMIT'] * (params['PHINT'] / 95.0)) ):\n                    END_VEGETATION_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(END_VEGETATION_DATE - END_JUVENILE_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    #\u00a0Sum of the two phases\n                    CROP_AGE_2 = str(END_VEGETATION_DATE - EMERGENCE_DATE).replace(' days 00:00:00','')\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE_2) #\u00a0Sum of the last two phases\n                    growstages[f'{ISTAGE}']['date'] = str(END_VEGETATION_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(END_VEGETATION_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    growstages[f'{ISTAGE}']['status'] = h_status\n                    #if (verbose is True):\n                    #    print(\"End of Juvenile: Thermal time reached at days duration \", i+1,\n                    #          str(END_VEGETATION_DATE), CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n        else:\n            print(\"Error reading weather data for vegetation phase\")\n\n        # print(\"End of Vegeation Growth \", END_VEGETATION_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of vegetation growth date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # ----------------------------------------------------------------------------------------------\n    #\u00a0DETERMINE END OF EAR GROWTH - End of Vegetative Growth to End of Ear Grow (End leaf growth)\n    #-----------------------------------------------------------------------------------------------\n    ISTAGE = 2 #\u00a0Terminal spikelet initiation to the end of leaf growth - CERES Stage 2\n    try:\n        SUMDTT = 0.0\n        P2 = params['PHINT'] * 3\n\n        w = weather[weather['DATE']&gt;=END_VEGETATION_DATE].reset_index(drop=True)\n        END_OF_EAR_GROWTH_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                # Thermal time\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                SUMDTT = SUMDTT + DTT\n\n                if (SUMDTT &gt;= P2):\n                    END_OF_EAR_GROWTH_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(END_OF_EAR_GROWTH_DATE - END_VEGETATION_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['date'] = str(END_OF_EAR_GROWTH_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(END_OF_EAR_GROWTH_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    growstages[f'{ISTAGE}']['status'] = h_status\n                    #if (verbose is True):\n                    #    print(\"Thermal time reached at days duration \", i+1, str(END_OF_EAR_GROWTH_DATE), \n                    #          CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n\n        #if (verbose is True):\n        #    print(\"End of Ear growth\",END_OF_EAR_GROWTH_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of ear growth date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n    #\n    #\n    # ----------------------------------------------------------------------------------------------\n    # DETERMINE ANTHESIS\n    # ----------------------------------------------------------------------------------------------\n    #\u00a0Anthesis date was estimated as occurring 7 d after heading. (based on McMaster and Smika, 1988; \n    # McMaster and Wilhelm, 2003; G. S. McMaster, unpubl. data). \n    #\u00a0Here we used 6 days according to IWIN reported anthesis\n    ISTAGE = 2.5\n    ADAH = params['ADAH'] # Anthesis days after heading\n\n    # Get ADAH parameter\n    a_status = 1\n    if (params['bruteforce']==True and params['brute_params']!={} and \n        params['brute_params'][\"obsAnthesisDAP\"] is not None):\n        #\u00a0using brute force algorithms\n        a_growstages, params, a_status = estimate_anthesis_by_bruteforce(params)\n        #params = { **params, **e_params}\n    elif ( useDefault is True and params['longitude']!=-180.0 and params['longitude']!='' \n          and params['longitude'] is not None):\n        ##\u00a0using geographic coordinates and month to extract values by linear regression\n        params = estimate_anthesis_by_default(config, params, END_OF_EAR_GROWTH_DATE)\n    elif (params['longitude']!=-180.0 and params['longitude']!='' and params['longitude'] is not None):\n        ##\u00a0using geographic coordinates\n        params = estimate_anthesis_by_coords(config, params)\n    elif (params['genotype']!=\"\" and params['genotype'] is not None):\n        #\u00a0using cultivar or genotype name\n        params = estimate_anthesis_by_cultivar(config, params, END_OF_EAR_GROWTH_DATE)\n\n    CROP_AGE = DAP + ADAH\n    ANTHESIS_DATE = END_OF_EAR_GROWTH_DATE + pd.DateOffset(days=ADAH)\n    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n    growstages[f'{ISTAGE}']['date'] = str(ANTHESIS_DATE).split(' ')[0]\n    growstages[f'{ISTAGE}']['DOY'] = int(ANTHESIS_DATE.dayofyear)\n    growstages[f'{ISTAGE}']['SUMDTT'] = -99.0 #round(SUMDTT-100, 1) # TODOs: SUMDTT debe recalcularse\n    growstages[f'{ISTAGE}']['DAP'] = int(DAP + ADAH)\n    growstages[f'{ISTAGE}']['status'] = a_status\n\n    # ----------------------------------------------------------------------------------------------\n    # DETERMINE END OF PANNICLE GROWTH - End pannicle growth - End of Ear Growth to Start of Grain Filling\n    # ----------------------------------------------------------------------------------------------\n    ISTAGE = 3 # Preanthesis ear growth - CERES Stage 3.\n    try:\n        SUMDTT = 0.0 #SUMDTT - P2\n        P3 = params['PHINT'] * 2\n        #TBASE=0.0\n\n        w = weather[weather['DATE']&gt;END_OF_EAR_GROWTH_DATE].reset_index(drop=True)\n        END_OF_PANNICLE_GROWTH_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                # Thermal time\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                SUMDTT = SUMDTT + DTT\n\n                if (SUMDTT &gt;= P3):\n                    END_OF_PANNICLE_GROWTH_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(END_OF_PANNICLE_GROWTH_DATE - END_OF_EAR_GROWTH_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['date'] = str(END_OF_PANNICLE_GROWTH_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(END_OF_PANNICLE_GROWTH_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    growstages[f'{ISTAGE}']['status'] = 1\n                    #if (verbose is True):\n                    #    print(\"Thermal time reached at days duration \", i+1, str(END_OF_PANNICLE_GROWTH_DATE), \n                    #          CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n\n        #if (verbose is True):\n        #    print(\"End of Pre-Anthesis Ear growth\",END_OF_PANNICLE_GROWTH_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of pre-anthesis earh growth date (end of pannicle growth date).\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # ----------------------------------------------------------------------------------------------\n    # DETERMINE BEGIN GRAIN FILLING - Grain fill - Start of Grain Filling to Maturity\n    # ----------------------------------------------------------------------------------------------\n    ISTAGE = 4 # Preanthesis ear growth to the beginning of grain filling - CERES Stage 4.\n    try: \n        P4 = params['DSGFT'] #200 GDD # APSIM-Wheat = 120\n        SUMDTT = 0.0 #SUMDTT - P3\n\n        w = weather[weather['DATE']&gt;=END_OF_PANNICLE_GROWTH_DATE].reset_index(drop=True)\n        BEGIN_GRAIN_FILLING_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                # Thermal time\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                SUMDTT = SUMDTT + DTT\n                if (SUMDTT &gt;= P4):\n                    BEGIN_GRAIN_FILLING_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(BEGIN_GRAIN_FILLING_DATE - END_OF_PANNICLE_GROWTH_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['date'] = str(BEGIN_GRAIN_FILLING_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(BEGIN_GRAIN_FILLING_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    growstages[f'{ISTAGE}']['status'] = 1\n                    #if (verbose is True):\n                    #    print(\"Thermal time reached at days duration \", i+1, str(BEGIN_GRAIN_FILLING_DATE), \n                    #          CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n\n        #if (verbose is True):\n        #    print(\"Begining of Grain fill\",BEGIN_GRAIN_FILLING_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining begin of grain fill date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # ----------------------------------------------------------------------------------------------\n    # DETERMINE END GRAIN FILLING - Maturity\n    # ----------------------------------------------------------------------------------------------\n    ISTAGE = 5\n    # Get SNOW, VREQ, P1V, P1D,  parameters using geographic coordinates\n    m_status = 1\n    if (params['bruteforce']==True and params['brute_params']!={} and \n        params['brute_params'][\"obsMaturityDAP\"] is not None):\n        #\u00a0using brute force algorithms\n        m_growstages, params, m_status = estimate_maturity_by_bruteforce(params)\n    elif ( useDefault is True and params['longitude']!=-180.0 and params['longitude']!='' \n          and params['longitude'] is not None):\n        ##\u00a0using geographic coordinates and month to extract values by linear regression\n        params = estimate_maturity_by_default(config, params, BEGIN_GRAIN_FILLING_DATE)\n    elif (params['longitude']!=-180.0 and params['longitude']!='' and params['longitude'] is not None):\n        ##\u00a0using geographic coordinates\n        params = estimate_maturity_by_coords(config, params)\n    elif (params['genotype']!=\"\" and params['genotype'] is not None):\n        #\u00a0using cultivar or genotype name\n        params = estimate_maturity_by_cultivar(config, params, BEGIN_GRAIN_FILLING_DATE)\n\n    try:\n        SUMDTT = 0.0 #SUMDTT - P4\n        #P5 = 430 + params['P5'] * 20 # P5 = (0.05 X TT_Maturity) - 21.5. ~500 degree-days\n        P5 = params['P5'] # 400 + 5.0 * 20  \n\n        w = weather[weather['DATE']&gt;=BEGIN_GRAIN_FILLING_DATE].reset_index(drop=True)\n        END_GRAIN_FILLING_DATE = ''\n        if (len(w)&gt;0):\n            for i in range(len(w)):\n                Tmin = float(w.iloc[i]['TMIN'])\n                Tmax = float(w.iloc[i]['TMAX'])\n                # Thermal time\n                DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                               Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                               Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                SUMDTT = SUMDTT + DTT\n                if (SUMDTT &gt;= P5):\n                    END_GRAIN_FILLING_DATE = w.iloc[i]['DATE']\n                    CROP_AGE = str(END_GRAIN_FILLING_DATE - BEGIN_GRAIN_FILLING_DATE).replace(' days 00:00:00','')\n                    DAP = DAP + int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                    growstages[f'{ISTAGE}']['date'] = str(END_GRAIN_FILLING_DATE).split(' ')[0]\n                    growstages[f'{ISTAGE}']['DOY'] = int(END_GRAIN_FILLING_DATE.dayofyear)\n                    growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                    growstages[f'{ISTAGE}']['DAP'] = DAP\n                    growstages[f'{ISTAGE}']['status'] = m_status\n                    #if (verbose is True):\n                    #    print(\"Thermal time reached at days duration \", i+1, str(END_GRAIN_FILLING_DATE), \n                    #          CROP_AGE, DAP, round(SUMDTT, 1))\n                    break\n\n        #if (verbose is True):\n        #    print(\"End of Grain filling\",END_GRAIN_FILLING_DATE)\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining end of grain fill date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # ----------------------------------------------------------------------------------------------\n    # DETERMINE HARVEST - Harvest - End of Grain Filling or Maturity\n    # ----------------------------------------------------------------------------------------------\n    ISTAGE = 6  # Physiological maturity to harvest - CERES Stage 6.\n    try: \n        SUMDTT = 0.0\n        estimateHarvest = True\n        P6 = params['P6']\n\n        if (estimateHarvest is False):\n            HARVEST = END_GRAIN_FILLING_DATE\n            growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n            growstages[f'{ISTAGE}']['date'] = str(HARVEST).split(' ')[0]\n            growstages[f'{ISTAGE}']['DOY'] = int(HARVEST.dayofyear)\n            growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n            growstages[f'{ISTAGE}']['DAP'] = DAP\n        else:\n            # A value of 250 degree-days can be used to approximate the thermal time from physiological maturity to harvest\n            w = weather[weather['DATE']&gt;=END_GRAIN_FILLING_DATE].reset_index(drop=True)\n            HARVEST = ''\n            if (len(w)&gt;0):\n                for i in range(len(w)):\n                    Tmin = float(w.iloc[i]['TMIN'])\n                    Tmax = float(w.iloc[i]['TMAX'])\n                    # Thermal time\n                    DTT = thermal_time_calculation( snow_depth=params['SNOW'], Tmin=Tmin, Tmax=Tmax, \n                                                   Tbase=params['TT_TBASE'], Topt=params['TT_TEMPERATURE_OPTIMUM'], \n                                                   Ttop=params['TT_TEMPERATURE_MAXIMUM'])\n                    SUMDTT = SUMDTT + DTT\n                    if (SUMDTT &gt;= P6):\n                        HARVEST = w.iloc[i]['DATE']\n                        CROP_AGE = str(HARVEST - END_GRAIN_FILLING_DATE).replace(' days 00:00:00','')\n                        DAP = DAP + int(CROP_AGE)\n                        growstages[f'{ISTAGE}']['AGE'] = int(CROP_AGE)\n                        growstages[f'{ISTAGE}']['date'] = str(HARVEST).split(' ')[0]\n                        growstages[f'{ISTAGE}']['DOY'] = int(HARVEST.dayofyear)\n                        growstages[f'{ISTAGE}']['SUMDTT'] = round(SUMDTT, 1)\n                        growstages[f'{ISTAGE}']['DAP'] = DAP\n                        growstages[f'{ISTAGE}']['status'] = 1\n                        #if (verbose is True):\n                        #    print(\"Thermal time reached at days duration \", i+1, str(HARVEST), \n                        #          CROP_AGE, DAP, round(SUMDTT, 1))\n                        break\n    except Exception as err:\n        try:\n            raise StageFailed(\"Problem determining physiological maturity to harvest date.\", ISTAGE, err)\n        except StageFailed as x:\n            print(x)\n            return\n\n    # ---------------------\n    if (dispDates is True):\n        try:\n            if (params['bruteforce']==True):\n                print(\"RSTG   GROWTH STAGE      DAP  DOY   CROP AGE   SUMDTT   DATE       STATUS\")\n                for i, k in enumerate(growstages.keys()):\n                    print(\"{:4}   {:10} {:&gt;10} {:&gt;4} {:&gt;6} {:&gt;12} {:&gt;12} {:&gt;12}\".format(i, growstages[k]['istage_old'], \n                                                                                 growstages[k]['DAP'],\n                                                                                 growstages[k]['DOY'], \n                                                                                 growstages[k]['AGE'],\n                                                                                 growstages[k]['SUMDTT'], \n                                                                                 growstages[k]['date'],\n                                                                                 growstages[k]['status']\n                                                                                       ))\n            else:\n                print(\"RSTG   GROWTH STAGE      DAP  DOY   CROP AGE   SUMDTT   DATE \")\n                for i, k in enumerate(growstages.keys()):\n                    print(\"{:4}   {:10} {:&gt;10} {:&gt;4} {:&gt;6} {:&gt;12} {:&gt;12}\".format(i, growstages[k]['istage_old'], \n                                                                             growstages[k]['DAP'],\n                                                                             growstages[k]['DOY'], growstages[k]['AGE'],\n                                                                             growstages[k]['SUMDTT'], \n                                                                             growstages[k]['date']))\n        except Exception as err:\n            try:\n                raise StageFailed(\"Problem displaying results.\", -99, err)\n            except StageFailed as x:\n                print(x)\n                return\n\n    if (dispFigPhenology is True):\n        try:\n            # remove anthesis to display correctly\n            if ('2.5' in growstages):\n                del growstages['2.5']\n            drawPhenology(gs=growstages, title='Phenological growth phases of Wheat', dpi=150,\n                         dispPlants=True, topDAPLabel=True, timeSpanLabel=True, topNameStageLabel=True,\n                         topNameStageLabelOpt=True, copyrightLabel=True, \n                         saveFig=False, showFig=True, path_to_save_results='./', \n                         fname='Fig_1_Phenological_Phases_Wheat', fmt='jpg')\n        except Exception as err:\n            try:\n                raise StageFailed(\"Problem displaying figure of phenological stages.\", -99, err)\n            except StageFailed as x:\n                print(x)\n                return\n    # ---------------------\n    return growstages, params\n</code></pre>"},{"location":"reference/#pywheat.pheno.estimate_anthesis_by_bruteforce","title":"<code>estimate_anthesis_by_bruteforce(params=None)</code>","text":"<p>Getting Anthesis date by brute force algorithm</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict</code> <p>A dictionary with attributes</p> <code>None</code> <p>Attributes     obsAnthesisDAP (int): Observed days after planting to Anthesis.     sowingdate (str): Sowing date in YYYY-MM-DD format.     latitude (float): Latitude of the site in celsius degrees     weather (object): A table or dataframe with weather data for the site     max_tries (int): Number of maximum tries to find the best value     error_lim (float): Threshold to classify the observation as a good or bad     adap_steps (int): Step to increase or reduce the ADAH parameters. Default 1     maxADAP (float): Threshold for the maximum value of ADAH to reach anthesis date.     ADAH (int): Number of days after heading. A threshold used for anthesis date after planting. Default is 6 days after heading.</p> <p>Returns:</p> Name Type Description <code>params</code> <code>dict</code> <p>Update params dictionary with with ADAH value for Anthesis date</p> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def estimate_anthesis_by_bruteforce(params=None):\n    '''Getting Anthesis date by brute force algorithm\n\n        Parameters:\n            params (dict): A dictionary with attributes\n\n        Attributes\n            obsAnthesisDAP (int): Observed days after planting to Anthesis.\n            sowingdate (str): Sowing date in YYYY-MM-DD format.\n            latitude (float): Latitude of the site in celsius degrees\n            weather (object): A table or dataframe with weather data for the site\n            max_tries (int): Number of maximum tries to find the best value\n            error_lim (float): Threshold to classify the observation as a good or bad\n            adap_steps (int): Step to increase or reduce the ADAH parameters. Default 1\n            maxADAP (float): Threshold for the maximum value of ADAH to reach anthesis date.\n            ADAH (int): Number of days after heading. A threshold used for anthesis date after planting. Default is 6 days after heading.\n\n        Returns:\n            params (dict): Update params dictionary with with ADAH value for Anthesis date\n\n    '''\n    if (params is None):\n        print(\"Parameters not valid\")\n        return\n    if (params['brute_params']['obsAnthesisDAP'] is None):\n        print(\"Observed anthesis days after planting not defined\")\n        return\n    if (params['sowing_date'] is None):\n        print(\"Sowing date not valid\")\n        return\n    if (params['latitude'] is None):\n        print(\"Latitude of the site not valid\")\n        return\n    if (params['weather'] is None):\n        print(\"Weather data not defined\")\n        return\n    try:\n        # Setup initial parameters\n        sowingdate = params['sowing_date']\n        latitude = params['latitude']\n        weather = params['weather']\n        obsDAP = params['brute_params']['obsAnthesisDAP']\n        max_tries = params['brute_params']['max_tries']\n        error_lim = params['brute_params']['error_lim']\n        adap_steps = params['brute_params']['adap_steps']\n        maxADAP = params['brute_params']['maxADAP']\n        ADAH = params['ADAH']\n\n        growstages = determine_anthesis_stage(initparams=params)\n\n        #\u00a0loop until converge\n        status = 0\n        t = 0\n        simDAP = int(growstages['2.5']['DAP']) \n        while True:\n            if (simDAP &lt; obsDAP):\n                ADAH = ADAH + adap_steps\n                #ADAH = min(maxADAP, ADAH)\n            else:\n                ADAH = ADAH - adap_steps\n                ADAH = max(ADAH, 0.0)\n            #\n            new_params = dict( \n                ADAH=ADAH\n            )\n            params = {**params, **new_params}\n            #\u00a0Run simulation\n            growstages = determine_anthesis_stage(initparams=params)\n            #\n            try:\n                simDAP = int(growstages['2.5']['DAP']) # Problem with DAP = '' # not found\n            except:\n                status = -3\n                break\n            if (simDAP == obsDAP):\n                status = 3\n                break\n            elif (ADAH &gt; maxADAP or ADAH &lt;= 0):\n                status = -3\n                break\n            elif (t &gt; max_tries):\n                status = -3\n                break\n            t += 1\n\n        # end while\n\n    except Exception as err:\n        print(f\"Problem getting anthesis\",err)\n\n    return growstages, params, status\n</code></pre>"},{"location":"reference/#pywheat.pheno.estimate_emergence_by_bruteforce","title":"<code>estimate_emergence_by_bruteforce(params=None)</code>","text":"<p>Getting Emergence date by brute force algorithm</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict</code> <p>A dictionary with attributes</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>obsEmergenceDAP</code> <code>int</code> <p>Observed days after planting to emergence.</p> <code>sowingdate</code> <code>str</code> <p>Sowing date in YYYY-MM-DD format.</p> <code>latitude</code> <code>float</code> <p>Latitude of the site in celsius degrees</p> <code>weather</code> <code>object</code> <p>A table or dataframe with weather data for the site</p> <code>max_tries</code> <code>int</code> <p>Number of maximum tries to find the best value</p> <code>error_lim</code> <code>float</code> <p>Threshold to classify the observation as a good or bad</p> <code>gdde_steps</code> <code>float</code> <p>Step to increase or reduce the GDDE parameters. Default 1.0</p> <code>maxGDDE</code> <code>float</code> <p>Threshold for the maximum value of GDDE to reach emergence date</p> <code>TT_EMERGENCE_LIMIT</code> <code>int</code> <p>Returns:</p> Name Type Description <code>params</code> <code>dict</code> <p>Update params dictionary with GDDE and SDEPTH values for Emergence date using P9</p> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def estimate_emergence_by_bruteforce(params=None):\n    '''Getting Emergence date by brute force algorithm\n\n        Parameters:\n            params (dict): A dictionary with attributes\n\n        Attributes:\n            obsEmergenceDAP (int): Observed days after planting to emergence.\n            sowingdate (str): Sowing date in YYYY-MM-DD format.\n            latitude (float): Latitude of the site in celsius degrees\n            weather (object): A table or dataframe with weather data for the site\n            max_tries (int): Number of maximum tries to find the best value\n            error_lim (float): Threshold to classify the observation as a good or bad\n            gdde_steps (float): Step to increase or reduce the GDDE parameters. Default 1.0\n            maxGDDE (float): Threshold for the maximum value of GDDE to reach emergence date\n            TT_EMERGENCE_LIMIT (int): #\u00a0threshold for thermal time to emergence. Default is 300 degree-days\n\n        Returns:\n            params (dict): Update params dictionary with GDDE and SDEPTH values for Emergence date using P9\n\n    '''\n    if (params is None):\n        print(\"Parameters not valid\")\n        return\n    if (params['brute_params']['obsEmergenceDAP'] is None):\n        print(\"Observed emergence days after planting not defined\")\n        return\n    if (params['sowing_date'] is None):\n        print(\"Sowing date not valid\")\n        return\n    if (params['latitude'] is None):\n        print(\"Latitude of the site not valid\")\n        return\n    if (params['weather'] is None):\n        print(\"Weather data not defined\")\n        return\n    try:\n\n        # Setup initial parameters\n        sowingdate = params['sowing_date']\n        latitude = params['latitude']\n        weather = params['weather']\n        obsDAP = params['brute_params'][\"obsEmergenceDAP\"]\n        max_tries = params['brute_params']['max_tries']\n        error_lim = params['brute_params']['error_lim']\n        gdde_steps = params['brute_params']['gdde_steps']\n        maxGDDE = params['brute_params']['maxGDDE']\n        TT_EMERGENCE_LIMIT = params['TT_EMERGENCE_LIMIT']\n        SDEPTH = params['SDEPTH']\n        GDDE = params['GDDE']\n        #\u00a0Run initial simulation\n        growstages = determine_emergence_stage(initparams=params)\n        #\u00a0loop until converge\n        status = 0\n        t = 0\n        simDAP = int(growstages['9']['DAP']) \n        while True:\n            if (simDAP &lt; obsDAP):\n                GDDE = GDDE + gdde_steps\n                if GDDE &gt; 20:\n                    SDEPTH = 5.0\n                if GDDE &gt; 30:\n                    SDEPTH = 10.0\n                if GDDE &gt; 40:\n                    SDEPTH = 15.0\n                if GDDE &gt; 50:\n                    SDEPTH = 20.0\n                #    SDEPTH = min(SDEPTH, 20.0)\n            else:\n                GDDE = GDDE - gdde_steps\n                GDDE = max(GDDE, 0.0)\n\n            new_params = dict( SDEPTH=SDEPTH, GDDE=GDDE ) # Updated parameters\n            params = {**params, **new_params}\n            growstages = determine_emergence_stage(initparams=params)\n\n            try:\n                simDAP = int(growstages['9']['DAP']) # Problem with DAP = '' # not found\n            except:\n                status = -1\n                break\n            if (simDAP == obsDAP):\n                status = 1\n                break\n            elif (int(growstages['9']['SUMDTT']) &gt; TT_EMERGENCE_LIMIT):\n                status = -1\n                break\n            elif GDDE &gt; maxGDDE or GDDE &lt;= 0:\n                status = -1\n                break\n            elif (t &gt; max_tries):\n                status = -1\n                break\n            t += 1\n\n        # end while\n\n    except Exception as err:\n        print(f\"Problem getting emergence by brute force\",err)\n\n    return growstages, params, status\n</code></pre>"},{"location":"reference/#pywheat.pheno.estimate_emergence_by_bruteforce--threshold-for-thermal-time-to-emergence-default-is-300-degree-days","title":"threshold for thermal time to emergence. Default is 300 degree-days","text":""},{"location":"reference/#pywheat.pheno.estimate_heading_by_bruteforce","title":"<code>estimate_heading_by_bruteforce(params=None)</code>","text":"<p>Getting Heading date by brute force algorithm.</p> <p>This tool allows users to run the model for several parameter values to test,  and then identifies which combination of parameter values results in simulated values that show  the least deviations from observed values of a specified trait using root-mean-square error (RMSE) as  the main criterion.</p> <pre><code>Parameters:\n    params (dict): A dictionary with attributes\n\nAttributes\n    obsHeadingDAP (int): Observed days after planting to Heading.\n    sowingdate (str): Sowing date in YYYY-MM-DD format.\n    latitude (float): Latitude of the site in celsius degrees\n    weather (object): A table or dataframe with weather data for the site\n    max_tries (int): Number of maximum tries to find the best value\n    error_lim (float): Threshold to classify the observation as a good or bad\n    phint_steps (float): Step to increase or reduce the PHINT parameters. Default 1.0\n    maxPHINT (float): Threshold for the maximum value of PHINT to reach heading date. Default value taken from DSSAT WHCER048.CUL\n    TT_TDU_LIMIT (float): Threshold for thermal development units (TDU). Default 400  degree-days\n\nReturns:\n    params (dict): Update params dictionary with with SNOW, VREQ, P1V, P1D and PHINT values for Heading date\n</code></pre> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def estimate_heading_by_bruteforce(params=None):\n    '''Getting Heading date by brute force algorithm.\n\n    This tool allows users to run the model for several parameter values to test, \n    and then identifies which combination of parameter values results in simulated values that show \n    the least deviations from observed values of a specified trait using root-mean-square error (RMSE) as \n    the main criterion.\n\n        Parameters:\n            params (dict): A dictionary with attributes\n\n        Attributes\n            obsHeadingDAP (int): Observed days after planting to Heading.\n            sowingdate (str): Sowing date in YYYY-MM-DD format.\n            latitude (float): Latitude of the site in celsius degrees\n            weather (object): A table or dataframe with weather data for the site\n            max_tries (int): Number of maximum tries to find the best value\n            error_lim (float): Threshold to classify the observation as a good or bad\n            phint_steps (float): Step to increase or reduce the PHINT parameters. Default 1.0\n            maxPHINT (float): Threshold for the maximum value of PHINT to reach heading date. Default value taken from DSSAT WHCER048.CUL\n            TT_TDU_LIMIT (float): Threshold for thermal development units (TDU). Default 400  degree-days\n\n        Returns:\n            params (dict): Update params dictionary with with SNOW, VREQ, P1V, P1D and PHINT values for Heading date\n\n    '''\n    if (params is None):\n        print(\"Parameters not valid\")\n        return\n    if (params['brute_params']['obsHeadingDAP'] is None):\n        print(\"Observed heading days after planting not defined\")\n        return\n    if (params['sowing_date'] is None):\n        print(\"Sowing date not valid\")\n        return\n    if (params['latitude'] is None):\n        print(\"Latitude of the site not valid\")\n        return\n    if (params['weather'] is None):\n        print(\"Weather data not defined\")\n        return\n    try:\n        # Setup initial parameters\n        sowingdate = params['sowing_date']\n        latitude = params['latitude']\n        weather = params['weather']\n        obsDAP = params['brute_params']['obsHeadingDAP']\n        max_tries = params['brute_params']['max_tries']\n        error_lim = params['brute_params']['error_lim']\n        phint_steps = params['brute_params']['phint_steps']\n        maxPHINT = params['brute_params']['maxPHINT']\n        TT_TDU_LIMIT = params['TT_TDU_LIMIT']\n        SDEPTH = params['SDEPTH']\n        GDDE = params['GDDE']\n        SNOW = params['SNOW'] #0 \n        VREQ = params['VREQ'] #505.0 \n        PHINT = params['PHINT'] #95.0\n        P1V = params['P1V'] #1.0 # Spring wheat\n        P1D = params['P1D'] #3.675\n\n        growstages = determine_heading_stage(initparams=params)\n\n        #\u00a0loop until converge\n        status = 0\n        t = 0\n        simDAP = int(growstages['2']['DAP']) \n        while True:\n            if (simDAP &lt; obsDAP):\n                PHINT = PHINT + phint_steps\n                if PHINT &gt; 120.0:\n                    P1V = P1V + 0.25\n                    P1V = min(P1V, 5.0)\n            else:\n                PHINT = PHINT - phint_steps\n                PHINT = max(PHINT, 0.0)\n            #\n            new_params = dict( \n                PHINT=PHINT, P1V=P1V, P1D=P1D, VREQ=VREQ, SNOW=SNOW, #TT_TDU_LIMIT = TT_TDU_LIMIT\n            )\n            params = {**params, **new_params}\n            #\u00a0Run simulation\n            growstages = determine_heading_stage(initparams=params)\n            #\n            try:\n                simDAP = int(growstages['2']['DAP']) # Problem with DAP = '' # not found\n            except:\n                status = -2\n                break\n            if (simDAP == obsDAP):\n                status = 2\n                break\n            elif (PHINT &gt; maxPHINT or PHINT &lt;= 0):\n                status = -2\n                break\n            elif (t &gt; max_tries):\n                status = -2\n                break\n            t += 1\n\n        # end while\n\n    except Exception as err:\n        print(f\"Problem getting heading by brute force\",err)\n\n    return growstages, params, status\n</code></pre>"},{"location":"reference/#pywheat.pheno.estimate_maturity_by_bruteforce","title":"<code>estimate_maturity_by_bruteforce(params=None)</code>","text":"<p>Getting maturity date by brute force algorithm</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict</code> <p>A dictionary with attributes</p> <code>None</code> <p>Attributes     obsMaturityDAP (int): Observed days after planting to maturity.     sowingdate (str): Sowing date in YYYY-MM-DD format.     latitude (float): Latitude of the site in celsius degrees     weather (object): A table or dataframe with weather data for the site     max_tries (int): Number of maximum tries to find the best value     error_lim (float): Threshold to classify the observation as a good or bad     p5_steps (float): Step to increase or reduce the P5 parameters. Default 1.0     maxP5 (float): Threshold for the maximum value of P5 to reach maturity date.</p> <p>Returns:</p> Name Type Description <code>params</code> <code>dict</code> <p>Update params dictionary with with P5 value for maturity date</p> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def estimate_maturity_by_bruteforce(params=None):\n    '''Getting maturity date by brute force algorithm\n\n        Parameters:\n            params (dict): A dictionary with attributes\n\n        Attributes\n            obsMaturityDAP (int): Observed days after planting to maturity.\n            sowingdate (str): Sowing date in YYYY-MM-DD format.\n            latitude (float): Latitude of the site in celsius degrees\n            weather (object): A table or dataframe with weather data for the site\n            max_tries (int): Number of maximum tries to find the best value\n            error_lim (float): Threshold to classify the observation as a good or bad\n            p5_steps (float): Step to increase or reduce the P5 parameters. Default 1.0\n            maxP5 (float): Threshold for the maximum value of P5 to reach maturity date.\n\n        Returns:\n            params (dict): Update params dictionary with with P5 value for maturity date\n\n    '''\n    if (params is None):\n        print(\"Parameters not valid\")\n        return\n    if (params['brute_params']['obsMaturityDAP'] is None):\n        print(\"Observed maturity days after planting not defined\")\n        return\n    if (params['sowing_date'] is None):\n        print(\"Sowing date not valid\")\n        return\n    if (params['latitude'] is None):\n        print(\"Latitude of the site not valid\")\n        return\n    if (params['weather'] is None):\n        print(\"Weather data not defined\")\n        return\n    try:\n        # Setup initial parameters\n        sowingdate = params['sowing_date']\n        latitude = params['latitude']\n        weather = params['weather']\n        obsDAP = params['brute_params']['obsMaturityDAP']\n        max_tries = params['brute_params']['max_tries']\n        error_lim = params['brute_params']['error_lim']\n        p5_steps = params['brute_params']['p5_steps']\n        maxP5 = params['brute_params']['maxP5']\n        P4 = params['DSGFT'] #200 GDD # APSIM-Wheat = 120\n        P5 = params['P5'] # P5 = (0.05 X TT_Maturity) - 21.5. ~500 degree-days \n\n        growstages = determine_maturity_stage(initparams=params)\n\n        #\u00a0loop until converge\n        status = 0\n        t = 0\n        simDAP = int(growstages['5']['DAP'])\n        while True:\n            if (simDAP &lt; obsDAP):\n                P5 = P5 + p5_steps\n                #P5 = min(maxP5, P5)\n            else:\n                P5 = P5 - p5_steps\n                P5 = max(P5, 0.0)\n            #\n            new_params = dict( \n                P5=P5\n            )\n            params = {**params, **new_params}\n            #\u00a0Run simulation\n            growstages = determine_maturity_stage(initparams=params)\n            #\n            try:\n                simDAP = int(growstages['5']['DAP']) # Problem with DAP = '' # not found\n            except:\n                status = -4\n                break\n            if (simDAP == obsDAP):\n                status = 4\n                break\n            elif (P5 &gt; maxP5 or P5 &lt;= 0):\n                status = -4\n                break\n            elif (t &gt; max_tries):\n                status = -4\n                break\n            t += 1\n\n        # end while\n\n    except Exception as err:\n        print(f\"Problem getting maturity\",err)\n\n    return growstages, params, status\n</code></pre>"},{"location":"reference/#pywheat.pheno.photoperiod_factor","title":"<code>photoperiod_factor(P1D=3.675, day_length=20)</code>","text":"<p>Photoperiod factor </p> <p>Phenology is affected by photoperiod between emergence and floral initiation, and  thermal time is affected by a photoperiod factor.</p> <p>Parameters:</p> Name Type Description Default <code>P1D</code> <code>float</code> <p>The sensitive to photoperiod (P1D) which is cultivar-specific. (1 - 6, low- high sensitive to day length)</p> <code>3.675</code> <code>day_length</code> <code>float</code> <p>Day length in hours</p> <code>20</code> <p>Returns:</p> Name Type Description <code>DF</code> <code>float</code> <p>A photoperiod factor</p> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def photoperiod_factor(P1D=3.675, day_length=20):\n    '''\n        Photoperiod factor \n\n        Phenology is affected by photoperiod between emergence and floral initiation, and \n        thermal time is affected by a photoperiod factor.\n\n        Parameters:\n            P1D (float): The sensitive to photoperiod (P1D) which is cultivar-specific. (1 - 6, low- high sensitive to day length)\n            day_length (float): Day length in hours\n\n        Returns:\n            DF (float): A photoperiod factor\n\n    '''\n    DF = 1 - (0.002 * P1D) * (20 - day_length)**2\n    return DF\n</code></pre>"},{"location":"reference/#pywheat.pheno.snow_fall","title":"<code>snow_fall(Tmax, Rain)</code>","text":"<p>Cold weather handling routine (extracted from watbal subroutine)</p> <p>Parameters:</p> Name Type Description Default <code>Rain</code> <code>float</code> <p>Precipitation depth for current day (mm)</p> required <code>Tmax</code> <code>float</code> <p>Maximum daily temperature (\u00b0C)</p> required <p>Returns:</p> Name Type Description <code>snow_melt</code> <code>float</code> <p>Daily Snowmelt (mm/d)</p> <code>snow</code> <code>float</code> <p>Snow accumulation (mm)</p> <code>water_available</code> <code>float</code> <p>Water available for infiltration or runoff (rainfall plus irrigation) (mm/d)</p> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def snow_fall(Tmax, Rain):\n    '''\n        Cold weather handling routine (extracted from watbal subroutine)\n\n        Parameters:\n            Rain (float): Precipitation depth for current day (mm)\n            Tmax (float): Maximum daily temperature (\u00b0C)\n\n        Returns:\n            snow_melt (float): Daily Snowmelt (mm/d)\n            snow (float): Snow accumulation (mm)\n            water_available (float): Water available for infiltration or runoff (rainfall plus irrigation) (mm/d)\n\n    '''\n    snow = 0.0\n    snow_melt = 0.0\n    water_available = 0.0\n    if (Tmax &gt; 1.0):\n        snow_melt = Tmax + Rain * 0.4\n        if (snow_melt &gt; snow):\n            snow_melt = snow\n        snow = snow - snow_melt\n        water_available = Rain + snow_melt\n    else:\n        snow = snow + Rain\n    #\n    return snow, snow_melt, water_available\n</code></pre>"},{"location":"reference/#pywheat.pheno.thermal_time_calculation","title":"<code>thermal_time_calculation(m='CERES', snow_depth=0, Tmin=None, Tmax=None, Tbase=0, Topt=26, Ttop=34)</code>","text":"<p>The daily thermal time (daily_TT) or Growing degree days calculation</p> <p>It's calculated from the daily average of maximum and minimum crown temperatures,  and is adjusted by genetic and environments factors.</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>str</code> <p>Name of the model. Default is 'CERES'. Options: CERES, NWHEAT, WHAPS</p> <code>'CERES'</code> <code>snow_depth</code> <code>int</code> <p>Snow depth in centimeters (cm). Default value is set to zero.</p> <code>0</code> <code>Tmin</code> <code>float</code> <p>Minimum Temperature (\u00b0C)</p> <code>None</code> <code>Tmax</code> <code>float</code> <p>Maximum Temperature (\u00b0C)</p> <code>None</code> <code>Tbase</code> <code>float</code> <p>Base temperature for development from ecotype database. Default 0\u00b0C</p> <code>0</code> <code>Topt</code> <code>float</code> <p>Optimum temperature for development from species database. Default 26\u00b0C</p> <code>26</code> <code>Ttop</code> <code>float</code> <p>Maximum temperature for development from species database. Default 34\u00b0C</p> <code>34</code> <p>Returns:</p> Name Type Description <code>dTT</code> <code>float</code> <p>Thermal time or Growing degree days</p> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def thermal_time_calculation(m='CERES', snow_depth=0, Tmin=None, Tmax=None, Tbase=0, Topt=26, Ttop=34):\n    '''\n        The daily thermal time (daily_TT) or Growing degree days calculation\n\n        It's calculated from the daily average of maximum and minimum crown temperatures, \n        and is adjusted by genetic and environments factors.\n\n        Parameters:\n            m (str): Name of the model. Default is 'CERES'. Options: CERES, NWHEAT, WHAPS\n            snow_depth (int): Snow depth in centimeters (cm). Default value is set to zero.\n            Tmin (float): Minimum Temperature (\u00b0C)\n            Tmax (float): Maximum Temperature (\u00b0C)\n            Tbase (float): Base temperature for development from ecotype database. Default 0\u00b0C\n            Topt (float): Optimum temperature for development from species database. Default 26\u00b0C\n            Ttop (float): Maximum temperature for development from species database. Default 34\u00b0C\n\n        Returns:\n            dTT (float): Thermal time or Growing degree days\n\n    '''\n    if (Tmin is None or Tmax is None):\n        print(\"Check input parameters\")\n        return\n    # Calculate Crown Temperatures\n    Tcmax, Tcmin, Tcrown = crown_temperatures(snow_depth=snow_depth, Tmin=Tmin, Tmax=Tmax)\n    tcdif = Tcmax - Tcmin\n    dTT = Tcrown - Tbase\n    if (m=='CERES'):\n        if (tcdif == 0): tcdif = 1.0\n        if (Tcmax &lt; Tbase):\n            dTT = 0.0\n        elif(Tcmax &lt; Topt):\n            if (Tcmin &lt; Tbase):\n                tcor = (Tcmax - Tbase) / tcdif\n                dTT = (Tcmax - Tbase) / 2 * tcor\n            else:\n                dTT = Tcrown - Tbase\n        elif(Tcmax &lt; Ttop):\n            if (Tcmin &lt; Topt):\n                tcor = (Tcmax - Topt) / tcdif\n                # dTT = 13. * (1 + tcor) + Tcmin/2 * (1 - tcor)\n                dTT = (Topt - Tbase) / 2 * (1 + tcor) + Tcmin/2 * (1 - tcor)\n            else:\n                dTT = Topt - Tbase\n        else:\n            if (Tcmin &lt; Topt):\n                tcor = (Tcmax - Ttop) / tcdif\n                # dTT = (60 - Tcmax) * tcor + Topt * (1 - tcor)\n                dTT = (Topt + Ttop - Tcmax) * tcor + Topt * (1 - tcor)\n                tcor =  (Topt - Tcmin) / tcdif\n                dTT = dTT * (1 - tcor) + (Tcmin + Topt) / 2 * tcor\n            else:\n                tcor = (Tcmax - Ttop) / tcdif\n                dTT = (Topt + Ttop - Tcmax) * tcor + Topt * (1 - tcor)\n        #\n    #elif(m=='NWHEAT'):\n    #    if ((Tcrown &gt; 0) and (Tcrown &lt;= 26)):\n    #        dTT = Tcrown\n    #    elif((Tcrown &gt; 26) and (Tcrown &lt;= 34)):\n    #        dTT = (26/8) * (34 - Tcrown)\n    #    elif((Tcrown &lt;= 0) or (Tcrown &gt; 34)):\n    #        dTT = 0\n\n    return round(dTT, 2)\n</code></pre>"},{"location":"reference/#pywheat.pheno.vernalization","title":"<code>vernalization(Tcrown, Tmin, Tmax, cumvd=0)</code>","text":"<p>Calculate damage to crop due to cold weather. </p> <p>Vernalization is a response to relatively cold temperatures  in some species that must occur before reproductive growth will begin.  For wheat, temperature above zero to about 8\u00b0C seem to be the most effective  for vernalization (Ahrens &amp; Loomis, 1963; Chujo, 1966).</p> <p>Vernalization affects phenology between emergence and floral initiation. Spring-type winter cereals have little sensitivity to vernalization, which is  the principal difference between them and the winter types.</p> <p>In the model, if the number of vernalization days (cumvd) is less than 10 and  the maximum temperature exceeds 30\u00b0C, then the number of vernalization days decreases  by 0.5 days per degree above 30\u00b0C. If cumvd is greater than 10, no devernalization is calculated. </p> <p>Vernalization is simulated from daily average crown temperature (Tcrown), daily maximum (Tmax) and minimum (Tmin) temperatures using the original CEREES approach.</p> <p>Parameters:</p> Name Type Description Default <code>Tcrown</code> <code>float</code> <p>daily average crown temperature (\u00b0C)</p> required <code>Tmin</code> <code>float</code> <p>daily average minimum temperature (\u00b0C)</p> required <code>Tmax</code> <code>float</code> <p>daily average maximum temperature (\u00b0C)</p> required <code>cumvd</code> <code>float</code> <p>the number of vernalization days of total vernalization</p> <code>0</code> <p>Returns:</p> Name Type Description <code>dV</code> <code>float</code> <p>Vernalization</p> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def vernalization(Tcrown, Tmin, Tmax, cumvd=0):\n    '''\n        Calculate damage to crop due to cold weather. \n\n        Vernalization is a response to relatively cold temperatures \n        in some species that must occur before reproductive growth will begin. \n        For wheat, temperature above zero to about 8\u00b0C seem to be the most effective \n        for vernalization (Ahrens &amp; Loomis, 1963; Chujo, 1966).\n\n        Vernalization affects phenology between emergence and floral initiation.\n        Spring-type winter cereals have little sensitivity to vernalization, which is \n        the principal difference between them and the winter types.\n\n        In the model, if the number of vernalization days (cumvd) is less than 10 and \n        the maximum temperature exceeds 30\u00b0C, then the number of vernalization days decreases \n        by 0.5 days per degree above 30\u00b0C. If cumvd is greater than 10, no devernalization is calculated. \n\n        Vernalization is simulated from daily average crown temperature (Tcrown), daily maximum (Tmax) and\n        minimum (Tmin) temperatures using the original CEREES approach.\n\n        Parameters:\n            Tcrown (float): daily average crown temperature (\u00b0C)\n            Tmin (float): daily average minimum temperature (\u00b0C)\n            Tmax (float): daily average maximum temperature (\u00b0C)\n            cumvd (float): the number of vernalization days of total vernalization\n\n        Returns:\n            dV (float): Vernalization\n    '''\n    #\u00a0TODOs: Add threshold values as a global variables for VERN_TMIN, VERN_TMAX and CUMVD\n    #\u00a0Vernalization\n    if( (Tmin &lt; 15) and (Tmax &gt; 0.0) ): #and Tmax &lt;= 30 ISTAGE == 1 || ISTAGE == 9\n        vd1 =  1.4 - 0.0778 * Tcrown\n        # vd2 =  0.5 + 13.44 * ( Tcrown / ((Tmax - Tmin + 3)**2)) # wrong extract by APSIM-Wheat documentation\n        vd2 =  0.5 + 13.44 / (Tmax - Tmin + 3)**2 * Tcrown #\u00a0Extract by CERES Wheat 2.0 fortran code\n        vd =  min(1.0, vd1, vd2)\n        vd =  max(vd, 0.0)\n        cumvd = cumvd + vd\n    # Devernalization\n    elif(Tmax &gt; 30 and cumvd &lt; 10): \n        cumvd = cumvd - 0.5 * (Tmax - 30)\n        cumvd = max(cumvd, 0.0) \n        #cumvd = max(min(0.5 * (Tmax - 30), cumvd), 0.0)\n    # ---------------------\n    # VF = vernalization_factor(P1V=1.5, dV=20, ISTAGE=ISTAGE)\n    #if (ISTAGE != 9):\n    #    VF = 1.0 - P1V * (VREQ - cumvd) \n    #    if (VF &lt;= 0.0):\n    #        VF = 0.0\n    #elif (VF &gt; 1.0):\n    #    VF = 1.0\n    # ---------------------\n\n    return cumvd\n</code></pre>"},{"location":"reference/#pywheat.pheno.vernalization_factor","title":"<code>vernalization_factor(P1V=1.0, dV=50, ISTAGE=1)</code>","text":"<p>Calculation of vernalization factor.</p> <p>Phenology is affected by vernalization between emergence and floral initiation, and  thermal time is affected by a vernalization factor.</p> <p>Parameters:</p> Name Type Description Default <code>P1V</code> <code>float</code> <p>The sensitive to vernalization (P1V) which is cultivar-specific. 1 for spring type, 5 for winter type</p> <code>1.0</code> <code>dV</code> <code>float</code> <p>The total vernalization. </p> <code>50</code> <p>Returns:</p> Name Type Description <code>VF</code> <code>float</code> <p>A vernalization factor</p> Source code in <code>pywheat/pheno/__init__.py</code> <pre><code>def vernalization_factor(P1V=1.00, dV=50, ISTAGE=1):\n    '''\n        Calculation of vernalization factor.\n\n        Phenology is affected by vernalization between emergence and floral initiation, and \n        thermal time is affected by a vernalization factor.\n\n        Parameters:\n            P1V (float): The sensitive to vernalization (P1V) which is cultivar-specific. 1 for spring type, 5 for winter type\n            dV (float): The total vernalization. \n\n        Returns:\n            VF (float): A vernalization factor\n\n    '''\n    # Set genetic coefficients to appropriate units\n    #VSEN = params['P1V'] * 0.0054545 + 0.0003 \n    # VF = 1 - VSEN * (50 - CUMVD)\n    if (ISTAGE==1): #or ISTAGE==2\n        VF = 1 - (0.0054545 * P1V  + 0.0003) * ( 50 - dV )\n        VF = max(min(VF, 1.0), 0.0)\n    else:\n        VF = 1.0\n    return VF\n</code></pre>"}]}